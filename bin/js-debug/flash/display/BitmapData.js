/**
 * Generated by Apache Royale Compiler from flash\display\BitmapData.as
 * flash.display.BitmapData
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.BitmapData');
/* Royale Dependency List: flash.filters.BitmapFilter,flash.geom.ColorTransform,flash.geom.Matrix,flash.geom.Point,flash.geom.Rectangle,flash.utils.ByteArray,XML*/

goog.require('flash.display.IBitmapDrawable');
goog.require('org.xfltools.core.FlashJSObject');



/**
 * @constructor
 * @extends {org.xfltools.core.FlashJSObject}
 * @implements {flash.display.IBitmapDrawable}
 * @param {number} width
 * @param {number} height
 * @param {boolean=} transparent
 * @param {number=} fillColor
 */
flash.display.BitmapData = function(width, height, transparent, fillColor) {
  flash.display.BitmapData.base(this, 'constructor');
  transparent = typeof transparent !== 'undefined' ? transparent : true;
  fillColor = typeof fillColor !== 'undefined' ? fillColor : 0xFFFFFFFF;
  this._canvas = document.createElement("canvas");
  this._canvas.width = width;
  this._canvas.height = height;
  this._context = this._canvas.getContext("2d");
  this._transparent = transparent;
};
goog.inherits(flash.display.BitmapData, org.xfltools.core.FlashJSObject);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.display.BitmapData', flash.display.BitmapData);


/**
 * @private
 * @const
 * @type {number}
 */
flash.display.BitmapData.VALUES_PER_PIXEL = 4;


/**
 * @private
 * @type {Object}
 */
flash.display.BitmapData.prototype._canvas;


/**
 * @private
 * @type {Object}
 */
flash.display.BitmapData.prototype._context;


/**
 * @private
 * @type {boolean}
 */
flash.display.BitmapData.prototype._transparent;


/**
 * @export
 * @param {Object} imageElement
 */
flash.display.BitmapData.prototype.initFromImageElement = function(imageElement) {
  this._context.drawImage(imageElement, 0, 0);
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {flash.filters.BitmapFilter} filter
 */
flash.display.BitmapData.prototype.applyFilter = function(sourceBitmapData, sourceRect, destPoint, filter) {
};


/**
 * @export
 * @return {flash.display.BitmapData}
 */
flash.display.BitmapData.prototype.clone = function() {
  var /** @type {flash.display.BitmapData} */ result = new flash.display.BitmapData(this.width, this.height, this._transparent, 0xFFFFFFFF);
  result.initFromImageElement(this._canvas);
  return result;
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {flash.geom.ColorTransform} colorTransform
 */
flash.display.BitmapData.prototype.colorTransform = function(rect, colorTransform) {
};


/**
 * @export
 * @param {flash.display.BitmapData} otherBitmapData
 * @return {Object}
 */
flash.display.BitmapData.prototype.compare = function(otherBitmapData) {
  return null;
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {number} sourceChannel
 * @param {number} destChannel
 */
flash.display.BitmapData.prototype.copyChannel = function(sourceBitmapData, sourceRect, destPoint, sourceChannel, destChannel) {
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {flash.display.BitmapData=} alphaBitmapData
 * @param {flash.geom.Point=} alphaPoint
 * @param {boolean=} mergeAlpha
 */
flash.display.BitmapData.prototype.copyPixels = function(sourceBitmapData, sourceRect, destPoint, alphaBitmapData, alphaPoint, mergeAlpha) {
  alphaBitmapData = typeof alphaBitmapData !== 'undefined' ? alphaBitmapData : null;
  alphaPoint = typeof alphaPoint !== 'undefined' ? alphaPoint : null;
  mergeAlpha = typeof mergeAlpha !== 'undefined' ? mergeAlpha : false;
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {flash.utils.ByteArray} data
 */
flash.display.BitmapData.prototype.copyPixelsToByteArray = function(rect, data) {
};


/**
 * @export
 */
flash.display.BitmapData.prototype.dispose = function() {
};


/**
 * @export
 * @param {flash.display.IBitmapDrawable} source
 * @param {flash.geom.Matrix=} matrix
 * @param {flash.geom.ColorTransform=} colorTransform
 * @param {string=} blendMode
 * @param {flash.geom.Rectangle=} clipRect
 * @param {boolean=} smoothing
 */
flash.display.BitmapData.prototype.draw = function(source, matrix, colorTransform, blendMode, clipRect, smoothing) {
  matrix = typeof matrix !== 'undefined' ? matrix : null;
  colorTransform = typeof colorTransform !== 'undefined' ? colorTransform : null;
  blendMode = typeof blendMode !== 'undefined' ? blendMode : null;
  clipRect = typeof clipRect !== 'undefined' ? clipRect : null;
  smoothing = typeof smoothing !== 'undefined' ? smoothing : false;
};


/**
 * @export
 * @param {flash.display.IBitmapDrawable} source
 * @param {flash.geom.Matrix=} matrix
 * @param {flash.geom.ColorTransform=} colorTransform
 * @param {string=} blendMode
 * @param {flash.geom.Rectangle=} clipRect
 * @param {boolean=} smoothing
 * @param {string=} quality
 */
flash.display.BitmapData.prototype.drawWithQuality = function(source, matrix, colorTransform, blendMode, clipRect, smoothing, quality) {
  matrix = typeof matrix !== 'undefined' ? matrix : null;
  colorTransform = typeof colorTransform !== 'undefined' ? colorTransform : null;
  blendMode = typeof blendMode !== 'undefined' ? blendMode : null;
  clipRect = typeof clipRect !== 'undefined' ? clipRect : null;
  smoothing = typeof smoothing !== 'undefined' ? smoothing : false;
  quality = typeof quality !== 'undefined' ? quality : null;
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {Object} compressor
 * @param {flash.utils.ByteArray=} byteArray
 * @return {flash.utils.ByteArray}
 */
flash.display.BitmapData.prototype.encode = function(rect, compressor, byteArray) {
  byteArray = typeof byteArray !== 'undefined' ? byteArray : null;
  return null;
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {number} color
 */
flash.display.BitmapData.prototype.fillRect = function(rect, color) {
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} color
 */
flash.display.BitmapData.prototype.floodFill = function(x, y, color) {
};


/**
 * @export
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.filters.BitmapFilter} filter
 * @return {flash.geom.Rectangle}
 */
flash.display.BitmapData.prototype.generateFilterRect = function(sourceRect, filter) {
  return null;
};


/**
 * @export
 * @param {number} mask
 * @param {number} color
 * @param {boolean=} findColor
 * @return {flash.geom.Rectangle}
 */
flash.display.BitmapData.prototype.getColorBoundsRect = function(mask, color, findColor) {
  findColor = typeof findColor !== 'undefined' ? findColor : true;
  return null;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
flash.display.BitmapData.prototype.getPixel = function(x, y) {
  var /** @type {Array} */ imageData = this._context.getImageData();
  var /** @type {number} */ pixelIndex = flash.display.BitmapData.arrayIndexFromXY(x, y, this._context.width, this._context.height);
  return flash.display.BitmapData.rgbaToUInt(imageData[pixelIndex], imageData[pixelIndex + 1], imageData[pixelIndex + 2], 255);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
flash.display.BitmapData.prototype.getPixel32 = function(x, y) {
  var /** @type {Array} */ imageData = this._context.getImageData();
  var /** @type {number} */ pixelIndex = flash.display.BitmapData.arrayIndexFromXY(x, y, this._context.width, this._context.height);
  return flash.display.BitmapData.rgbaToUInt(imageData[pixelIndex], imageData[pixelIndex + 1], imageData[pixelIndex + 2], imageData[pixelIndex + 3]);
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @return {flash.utils.ByteArray}
 */
flash.display.BitmapData.prototype.getPixels = function(rect) {
  return null;
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @return {Array}
 */
flash.display.BitmapData.prototype.getVector = function(rect) {
  return null;
};


/**
 * @export
 * @param {flash.geom.Rectangle=} hRect
 * @return {Array}
 */
flash.display.BitmapData.prototype.histogram = function(hRect) {
  hRect = typeof hRect !== 'undefined' ? hRect : null;
  return null;
};


/**
 * @export
 * @param {flash.geom.Point} firstPoint
 * @param {number} firstAlphaThreshold
 * @param {Object} secondObject
 * @param {flash.geom.Point=} secondBitmapDataPoint
 * @param {number=} secondAlphaThreshold
 * @return {boolean}
 */
flash.display.BitmapData.prototype.hitTest = function(firstPoint, firstAlphaThreshold, secondObject, secondBitmapDataPoint, secondAlphaThreshold) {
  secondBitmapDataPoint = typeof secondBitmapDataPoint !== 'undefined' ? secondBitmapDataPoint : null;
  secondAlphaThreshold = typeof secondAlphaThreshold !== 'undefined' ? secondAlphaThreshold : 1;
  return false;
};


/**
 * @export
 */
flash.display.BitmapData.prototype.lock = function() {
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {number} redMultiplier
 * @param {number} greenMultiplier
 * @param {number} blueMultiplier
 * @param {number} alphaMultiplier
 */
flash.display.BitmapData.prototype.merge = function(sourceBitmapData, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
};


/**
 * @export
 * @param {number} randomSeed
 * @param {number=} low
 * @param {number=} high
 * @param {number=} channelOptions
 * @param {boolean=} grayScale
 */
flash.display.BitmapData.prototype.noise = function(randomSeed, low, high, channelOptions, grayScale) {
  low = typeof low !== 'undefined' ? low : 0;
  high = typeof high !== 'undefined' ? high : 255;
  channelOptions = typeof channelOptions !== 'undefined' ? channelOptions : 7;
  grayScale = typeof grayScale !== 'undefined' ? grayScale : false;
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {Array=} redArray
 * @param {Array=} greenArray
 * @param {Array=} blueArray
 * @param {Array=} alphaArray
 */
flash.display.BitmapData.prototype.paletteMap = function(sourceBitmapData, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray) {
  redArray = typeof redArray !== 'undefined' ? redArray : null;
  greenArray = typeof greenArray !== 'undefined' ? greenArray : null;
  blueArray = typeof blueArray !== 'undefined' ? blueArray : null;
  alphaArray = typeof alphaArray !== 'undefined' ? alphaArray : null;
};


/**
 * @export
 * @param {number} baseX
 * @param {number} baseY
 * @param {number} numOctaves
 * @param {number} randomSeed
 * @param {boolean} stitch
 * @param {boolean} fractalNoise
 * @param {number=} channelOptions
 * @param {boolean=} grayScale
 * @param {Array=} offsets
 */
flash.display.BitmapData.prototype.perlinNoise = function(baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets) {
  channelOptions = typeof channelOptions !== 'undefined' ? channelOptions : 7;
  grayScale = typeof grayScale !== 'undefined' ? grayScale : false;
  offsets = typeof offsets !== 'undefined' ? offsets : null;
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {number=} randomSeed
 * @param {number=} numPixels
 * @param {number=} fillColor
 * @return {number}
 */
flash.display.BitmapData.prototype.pixelDissolve = function(sourceBitmapData, sourceRect, destPoint, randomSeed, numPixels, fillColor) {
  randomSeed = typeof randomSeed !== 'undefined' ? randomSeed : 0;
  numPixels = typeof numPixels !== 'undefined' ? numPixels : 0;
  fillColor = typeof fillColor !== 'undefined' ? fillColor : 0;
  return 0;
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
flash.display.BitmapData.prototype.scroll = function(x, y) {
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} color
 */
flash.display.BitmapData.prototype.setPixel = function(x, y, color) {
  var /** @type {Array} */ imageData = this._context.getImageData();
  var /** @type {number} */ pixelIndex = flash.display.BitmapData.arrayIndexFromXY(x, y, this._context.width, this._context.height);
  var /** @type {Array} */ rgbaValues = flash.display.BitmapData.uintToRGBA(color);
  imageData[pixelIndex] = rgbaValues[0];
  imageData[pixelIndex + 1] = rgbaValues[1];
  imageData[pixelIndex + 2] = rgbaValues[2];
  imageData[pixelIndex + 3] = 255;
  this._context.putImageData(imageData, 0, 0);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 * @param {number} color
 */
flash.display.BitmapData.prototype.setPixel32 = function(x, y, color) {
  var /** @type {Array} */ imageData = this._context.getImageData();
  var /** @type {number} */ pixelIndex = flash.display.BitmapData.arrayIndexFromXY(x, y, this._context.width, this._context.height);
  var /** @type {Array} */ rgbaValues = flash.display.BitmapData.uintToRGBA(color);
  imageData[pixelIndex] = rgbaValues[0];
  imageData[pixelIndex + 1] = rgbaValues[1];
  imageData[pixelIndex + 2] = rgbaValues[2];
  imageData[pixelIndex + 3] = rgbaValues[3];
  this._context.putImageData(imageData, 0, 0);
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {flash.utils.ByteArray} inputByteArray
 */
flash.display.BitmapData.prototype.setPixels = function(rect, inputByteArray) {
};


/**
 * @export
 * @param {flash.geom.Rectangle} rect
 * @param {Array} inputVector
 */
flash.display.BitmapData.prototype.setVector = function(rect, inputVector) {
};


/**
 * @export
 * @param {flash.display.BitmapData} sourceBitmapData
 * @param {flash.geom.Rectangle} sourceRect
 * @param {flash.geom.Point} destPoint
 * @param {string} operation
 * @param {number} threshold
 * @param {number=} color
 * @param {number=} mask
 * @param {boolean=} copySource
 * @return {number}
 */
flash.display.BitmapData.prototype.threshold = function(sourceBitmapData, sourceRect, destPoint, operation, threshold, color, mask, copySource) {
  color = typeof color !== 'undefined' ? color : 0;
  mask = typeof mask !== 'undefined' ? mask : 0xFFFFFFFF;
  copySource = typeof copySource !== 'undefined' ? copySource : false;
  return 0;
};


/**
 * @export
 * @param {flash.geom.Rectangle=} changeRect
 */
flash.display.BitmapData.prototype.unlock = function(changeRect) {
  changeRect = typeof changeRect !== 'undefined' ? changeRect : null;
};


/**
 * @export
 * @param {number} red
 * @param {number} green
 * @param {number} blue
 * @param {number} alpha
 * @return {number}
 */
flash.display.BitmapData.rgbaToUInt = function(red, green, blue, alpha) {
  var /** @type {number} */ RGB = (alpha << 24);
  RGB = RGB | (red << 16);
  RGB = RGB | (green << 8);
  RGB = RGB | blue;
  return RGB;
};


/**
 * @export
 * @param {number} value
 * @return {Array}
 */
flash.display.BitmapData.uintToRGBA = function(value) {
  var /** @type {number} */ alpha = (value >> 24) & 255;
  var /** @type {number} */ red = (value >> 16) & 255;
  var /** @type {number} */ green = (value >> 8) & 255;
  var /** @type {number} */ blue = value & 255;
  return [red, green, blue, alpha];
};


/**
 * @private
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {number}
 */
flash.display.BitmapData.arrayIndexFromXY = function(x, y, width, height) {
  return y * width * flash.display.BitmapData.VALUES_PER_PIXEL + x * flash.display.BitmapData.VALUES_PER_PIXEL;
};


flash.display.BitmapData.prototype.get__height = function() {
  if (this._canvas) {
    return this._canvas.height;
  }
  return 0;
};


flash.display.BitmapData.prototype.get__rect = function() {
  return new flash.geom.Rectangle(0, 0, this._canvas.width, this._canvas.height);
};


flash.display.BitmapData.prototype.get__transparent = function() {
  return this._transparent;
};


flash.display.BitmapData.prototype.get__width = function() {
  if (this._canvas) {
    return this._canvas.width;
  }
  return 0;
};


flash.display.BitmapData.prototype.get__canvas = function() {
  return this._canvas;
};


Object.defineProperties(flash.display.BitmapData.prototype, /** @lends {flash.display.BitmapData.prototype} */ {
/**
  * @export
  * @type {number} */
height: {
get: flash.display.BitmapData.prototype.get__height},
/**
  * @export
  * @type {flash.geom.Rectangle} */
rect: {
get: flash.display.BitmapData.prototype.get__rect},
/**
  * @export
  * @type {boolean} */
transparent: {
get: flash.display.BitmapData.prototype.get__transparent},
/**
  * @export
  * @type {number} */
width: {
get: flash.display.BitmapData.prototype.get__width},
/**
  * @export
  * @type {Object} */
canvas: {
get: flash.display.BitmapData.prototype.get__canvas}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.BitmapData.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BitmapData', qName: 'flash.display.BitmapData', kind: 'class' }], interfaces: [flash.display.IBitmapDrawable] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.BitmapData.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'height': { type: 'int', access: 'readonly', declaredBy: 'flash.display.BitmapData'},
        'rect': { type: 'flash.geom.Rectangle', access: 'readonly', declaredBy: 'flash.display.BitmapData'},
        'transparent': { type: 'Boolean', access: 'readonly', declaredBy: 'flash.display.BitmapData'},
        'width': { type: 'int', access: 'readonly', declaredBy: 'flash.display.BitmapData'},
        'canvas': { type: 'Object', access: 'readonly', declaredBy: 'flash.display.BitmapData'}
      };
    },
    methods: function () {
      return {
        'initFromImageElement': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }},
        'BitmapData': { type: '', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'Boolean', optional: true },{ index: 4, type: 'uint', optional: true } ]; }},
        'applyFilter': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'flash.filters.BitmapFilter', optional: false } ]; }},
        'clone': { type: 'flash.display.BitmapData', declaredBy: 'flash.display.BitmapData'},
        'colorTransform': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'flash.geom.ColorTransform', optional: false } ]; }},
        'compare': { type: 'Object', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false } ]; }},
        'copyChannel': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'uint', optional: false },{ index: 5, type: 'uint', optional: false } ]; }},
        'copyPixels': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'flash.display.BitmapData', optional: true },{ index: 5, type: 'flash.geom.Point', optional: true },{ index: 6, type: 'Boolean', optional: true } ]; }},
        'copyPixelsToByteArray': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'flash.utils.ByteArray', optional: false } ]; }},
        'dispose': { type: 'void', declaredBy: 'flash.display.BitmapData'},
        'draw': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.IBitmapDrawable', optional: false },{ index: 2, type: 'flash.geom.Matrix', optional: true },{ index: 3, type: 'flash.geom.ColorTransform', optional: true },{ index: 4, type: 'String', optional: true },{ index: 5, type: 'flash.geom.Rectangle', optional: true },{ index: 6, type: 'Boolean', optional: true } ]; }},
        'drawWithQuality': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.IBitmapDrawable', optional: false },{ index: 2, type: 'flash.geom.Matrix', optional: true },{ index: 3, type: 'flash.geom.ColorTransform', optional: true },{ index: 4, type: 'String', optional: true },{ index: 5, type: 'flash.geom.Rectangle', optional: true },{ index: 6, type: 'Boolean', optional: true },{ index: 7, type: 'String', optional: true } ]; }},
        'encode': { type: 'flash.utils.ByteArray', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'Object', optional: false },{ index: 3, type: 'flash.utils.ByteArray', optional: true } ]; }},
        'fillRect': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'uint', optional: false } ]; }},
        'floodFill': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'uint', optional: false } ]; }},
        'generateFilterRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'flash.filters.BitmapFilter', optional: false } ]; }},
        'getColorBoundsRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'uint', optional: false },{ index: 3, type: 'Boolean', optional: true } ]; }},
        'getPixel': { type: 'uint', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false } ]; }},
        'getPixel32': { type: 'uint', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false } ]; }},
        'getPixels': { type: 'flash.utils.ByteArray', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false } ]; }},
        'getVector': { type: 'Vector.<uint>', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false } ]; }},
        'histogram': { type: 'Vector.<Vector.<Number>>', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: true } ]; }},
        'hitTest': { type: 'Boolean', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Point', optional: false },{ index: 2, type: 'uint', optional: false },{ index: 3, type: 'Object', optional: false },{ index: 4, type: 'flash.geom.Point', optional: true },{ index: 5, type: 'uint', optional: true } ]; }},
        'lock': { type: 'void', declaredBy: 'flash.display.BitmapData'},
        'merge': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'uint', optional: false },{ index: 5, type: 'uint', optional: false },{ index: 6, type: 'uint', optional: false },{ index: 7, type: 'uint', optional: false } ]; }},
        'noise': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'uint', optional: true },{ index: 3, type: 'uint', optional: true },{ index: 4, type: 'uint', optional: true },{ index: 5, type: 'Boolean', optional: true } ]; }},
        'paletteMap': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'Array', optional: true },{ index: 5, type: 'Array', optional: true },{ index: 6, type: 'Array', optional: true },{ index: 7, type: 'Array', optional: true } ]; }},
        'perlinNoise': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'uint', optional: false },{ index: 4, type: 'int', optional: false },{ index: 5, type: 'Boolean', optional: false },{ index: 6, type: 'Boolean', optional: false },{ index: 7, type: 'uint', optional: true },{ index: 8, type: 'Boolean', optional: true },{ index: 9, type: 'Array', optional: true } ]; }},
        'pixelDissolve': { type: 'int', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'int', optional: true },{ index: 5, type: 'int', optional: true },{ index: 6, type: 'uint', optional: true } ]; }},
        'scroll': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false } ]; }},
        'setPixel': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'uint', optional: false } ]; }},
        'setPixel32': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'uint', optional: false } ]; }},
        'setPixels': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'flash.utils.ByteArray', optional: false } ]; }},
        'setVector': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: false },{ index: 2, type: 'Vector.<uint>', optional: false } ]; }},
        'threshold': { type: 'uint', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.display.BitmapData', optional: false },{ index: 2, type: 'flash.geom.Rectangle', optional: false },{ index: 3, type: 'flash.geom.Point', optional: false },{ index: 4, type: 'String', optional: false },{ index: 5, type: 'uint', optional: false },{ index: 6, type: 'uint', optional: true },{ index: 7, type: 'uint', optional: true },{ index: 8, type: 'Boolean', optional: true } ]; }},
        'unlock': { type: 'void', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'flash.geom.Rectangle', optional: true } ]; }},
        '|rgbaToUInt': { type: 'int', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'int', optional: false },{ index: 4, type: 'int', optional: false } ]; }},
        '|uintToRGBA': { type: 'Vector.<int>', declaredBy: 'flash.display.BitmapData', parameters: function () { return [  { index: 1, type: 'int', optional: false } ]; }}
      };
    }
  };
};
