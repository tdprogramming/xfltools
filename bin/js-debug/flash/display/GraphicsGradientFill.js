/**
 * Generated by Apache Royale Compiler from flash\display\GraphicsGradientFill.as
 * flash.display.GraphicsGradientFill
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.GraphicsGradientFill');
/* Royale Dependency List: flash.geom.Matrix,XML*/

goog.require('flash.display.IGraphicsData');
goog.require('flash.display.IGraphicsFill');



/**
 * @constructor
 * @implements {flash.display.IGraphicsFill}
 * @implements {flash.display.IGraphicsData}
 * @param {string=} type
 * @param {Array=} colors
 * @param {Array=} alphas
 * @param {Array=} ratios
 * @param {*=} matrix
 * @param {*=} spreadMethod
 * @param {string=} interpolationMethod
 * @param {number=} focalPointRatio
 */
flash.display.GraphicsGradientFill = function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
  type = typeof type !== 'undefined' ? type : "linear";
  colors = typeof colors !== 'undefined' ? colors : null;
  alphas = typeof alphas !== 'undefined' ? alphas : null;
  ratios = typeof ratios !== 'undefined' ? ratios : null;
  matrix = typeof matrix !== 'undefined' ? matrix : null;
  spreadMethod = typeof spreadMethod !== 'undefined' ? spreadMethod : "pad";
  interpolationMethod = typeof interpolationMethod !== 'undefined' ? interpolationMethod : "rgb";
  focalPointRatio = typeof focalPointRatio !== 'undefined' ? focalPointRatio : 0.0;
  this.alphas = alphas;
  this.colors = colors;
  this.focalPointRatio = focalPointRatio;
  this.interpolationMethod = interpolationMethod;
  this.matrix = matrix;
  this.ratios = ratios;
  this.spreadMethod = org.apache.royale.utils.Language.string(spreadMethod);
  this.type = type;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.display.GraphicsGradientFill', flash.display.GraphicsGradientFill);


/**
 * @export
 * @type {Array}
 */
flash.display.GraphicsGradientFill.prototype.alphas;


/**
 * @export
 * @type {Array}
 */
flash.display.GraphicsGradientFill.prototype.colors;


/**
 * @export
 * @type {number}
 */
flash.display.GraphicsGradientFill.prototype.focalPointRatio;


/**
 * @export
 * @type {string}
 */
flash.display.GraphicsGradientFill.prototype.interpolationMethod;


/**
 * @export
 * @type {flash.geom.Matrix}
 */
flash.display.GraphicsGradientFill.prototype.matrix;


/**
 * @export
 * @type {Array}
 */
flash.display.GraphicsGradientFill.prototype.ratios;


/**
 * @export
 * @type {string}
 */
flash.display.GraphicsGradientFill.prototype.spreadMethod;


/**
 * @export
 * @type {string}
 */
flash.display.GraphicsGradientFill.prototype.type;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.GraphicsGradientFill.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GraphicsGradientFill', qName: 'flash.display.GraphicsGradientFill', kind: 'class' }], interfaces: [flash.display.IGraphicsFill, flash.display.IGraphicsData] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.GraphicsGradientFill.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'alphas': { type: 'Array'},
        'colors': { type: 'Array'},
        'focalPointRatio': { type: 'Number'},
        'interpolationMethod': { type: 'String'},
        'matrix': { type: 'flash.geom.Matrix'},
        'ratios': { type: 'Array'},
        'spreadMethod': { type: 'String'},
        'type': { type: 'String'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'GraphicsGradientFill': { type: '', declaredBy: 'flash.display.GraphicsGradientFill', parameters: function () { return [  { index: 1, type: 'String', optional: true },{ index: 2, type: 'Array', optional: true },{ index: 3, type: 'Array', optional: true },{ index: 4, type: 'Array', optional: true },{ index: 5, type: '*', optional: true },{ index: 6, type: '*', optional: true },{ index: 7, type: 'String', optional: true },{ index: 8, type: 'Number', optional: true } ]; }}
      };
    }
  };
};
