/**
 * Generated by Apache Royale Compiler from flash\display\GraphicsPath.as
 * flash.display.GraphicsPath
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.GraphicsPath');
/* Royale Dependency List: flash.display.GraphicsPathCommand,XML*/

goog.require('flash.display.IGraphicsData');
goog.require('flash.display.IGraphicsPath');



/**
 * @constructor
 * @implements {flash.display.IGraphicsPath}
 * @implements {flash.display.IGraphicsData}
 * @param {Array=} commands
 * @param {Array=} data
 * @param {string=} winding
 */
flash.display.GraphicsPath = function(commands, data, winding) {
  commands = typeof commands !== 'undefined' ? commands : null;
  data = typeof data !== 'undefined' ? data : null;
  winding = typeof winding !== 'undefined' ? winding : "evenOdd";
  this.commands = commands;
  this.data = data;
  this.winding = winding;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.display.GraphicsPath', flash.display.GraphicsPath);


/**
 * @export
 * @type {Array}
 */
flash.display.GraphicsPath.prototype.commands;


/**
 * @export
 * @type {Array}
 */
flash.display.GraphicsPath.prototype.data;


/**
 * @export
 * @type {string}
 */
flash.display.GraphicsPath.prototype.winding;


/**
 * @export
 * @param {number} controlX1
 * @param {number} controlY1
 * @param {number} controlX2
 * @param {number} controlY2
 * @param {number} anchorX
 * @param {number} anchorY
 */
flash.display.GraphicsPath.prototype.cubicCurveTo = function(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
  this.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
  this.data.push(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY);
};


/**
 * @export
 * @param {number} controlX
 * @param {number} controlY
 * @param {number} anchorX
 * @param {number} anchorY
 */
flash.display.GraphicsPath.prototype.curveTo = function(controlX, controlY, anchorX, anchorY) {
  this.commands.push(flash.display.GraphicsPathCommand.CURVE_TO);
  this.data.push(controlX, controlY, anchorX, anchorY);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
flash.display.GraphicsPath.prototype.lineTo = function(x, y) {
  this.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
  this.data.push(x, y);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
flash.display.GraphicsPath.prototype.moveTo = function(x, y) {
  this.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
  this.data.push(x, y);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
flash.display.GraphicsPath.prototype.wideLineTo = function(x, y) {
  this.commands.push(flash.display.GraphicsPathCommand.WIDE_LINE_TO);
  this.data.push(x, y);
};


/**
 * @export
 * @param {number} x
 * @param {number} y
 */
flash.display.GraphicsPath.prototype.wideMoveTo = function(x, y) {
  this.commands.push(flash.display.GraphicsPathCommand.WIDE_MOVE_TO);
  this.data.push(x, y);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.GraphicsPath.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GraphicsPath', qName: 'flash.display.GraphicsPath', kind: 'class' }], interfaces: [flash.display.IGraphicsPath, flash.display.IGraphicsData] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.GraphicsPath.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'commands': { type: 'Vector.<int>'},
        'data': { type: 'Vector.<Number>'},
        'winding': { type: 'String'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'GraphicsPath': { type: '', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Vector.<int>', optional: true },{ index: 2, type: 'Vector.<Number>', optional: true },{ index: 3, type: 'String', optional: true } ]; }},
        'cubicCurveTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false },{ index: 4, type: 'Number', optional: false },{ index: 5, type: 'Number', optional: false },{ index: 6, type: 'Number', optional: false } ]; }},
        'curveTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false },{ index: 4, type: 'Number', optional: false } ]; }},
        'lineTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'moveTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'wideLineTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'wideMoveTo': { type: 'void', declaredBy: 'flash.display.GraphicsPath', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }}
      };
    }
  };
};
