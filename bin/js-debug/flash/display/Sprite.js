/**
 * Generated by Apache Royale Compiler from flash\display\Sprite.as
 * flash.display.Sprite
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.Sprite');
/* Royale Dependency List: flash.display.DisplayObject,flash.display.Graphics,flash.geom.Rectangle,XML*/

goog.require('flash.display.DisplayObjectContainer');



/**
 * @constructor
 * @extends {flash.display.DisplayObjectContainer}
 */
flash.display.Sprite = function() {
  flash.display.Sprite.base(this, 'constructor');
  this._graphics = new flash.display.Graphics();
  this._javascriptImplementation.addChild(this._graphics.javascriptImplementation);
};
goog.inherits(flash.display.Sprite, flash.display.DisplayObjectContainer);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.display.Sprite', flash.display.Sprite);


/**
 * @export
 * @type {boolean}
 */
flash.display.Sprite.prototype.buttonMode;


/**
 * @export
 * @type {flash.display.DisplayObject}
 */
flash.display.Sprite.prototype.dropTarget;


/**
 * @private
 * @type {flash.display.Graphics}
 */
flash.display.Sprite.prototype._graphics;


/**
 * @export
 * @type {flash.display.Sprite}
 */
flash.display.Sprite.prototype.hitArea;


/**
 * @export
 * @type {boolean}
 */
flash.display.Sprite.prototype.useHandCursor;


/**
 * @export
 * @param {boolean=} lockCenter
 * @param {flash.geom.Rectangle=} bounds
 */
flash.display.Sprite.prototype.startDrag = function(lockCenter, bounds) {
  lockCenter = typeof lockCenter !== 'undefined' ? lockCenter : false;
  bounds = typeof bounds !== 'undefined' ? bounds : null;
};


/**
 * @export
 * @param {number} touchPointID
 * @param {boolean=} lockCenter
 * @param {flash.geom.Rectangle=} bounds
 */
flash.display.Sprite.prototype.startTouchDrag = function(touchPointID, lockCenter, bounds) {
  lockCenter = typeof lockCenter !== 'undefined' ? lockCenter : false;
  bounds = typeof bounds !== 'undefined' ? bounds : null;
};


/**
 * @export
 */
flash.display.Sprite.prototype.stopDrag = function() {
};


/**
 * @export
 * @param {number} touchPointID
 */
flash.display.Sprite.prototype.stopTouchDrag = function(touchPointID) {
};


flash.display.Sprite.prototype.get__graphics = function() {
  return this._graphics;
};


Object.defineProperties(flash.display.Sprite.prototype, /** @lends {flash.display.Sprite.prototype} */ {
/**
  * @export
  * @type {flash.display.Graphics} */
graphics: {
get: flash.display.Sprite.prototype.get__graphics}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.Sprite.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Sprite', qName: 'flash.display.Sprite', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.Sprite.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'buttonMode': { type: 'Boolean'},
        'dropTarget': { type: 'flash.display.DisplayObject'},
        'hitArea': { type: 'flash.display.Sprite'},
        'useHandCursor': { type: 'Boolean'}
      };
    },
    accessors: function () {
      return {
        'graphics': { type: 'flash.display.Graphics', access: 'readonly', declaredBy: 'flash.display.Sprite'}
      };
    },
    methods: function () {
      return {
        'Sprite': { type: '', declaredBy: 'flash.display.Sprite'},
        'startDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [  { index: 1, type: 'Boolean', optional: true },{ index: 2, type: 'flash.geom.Rectangle', optional: true } ]; }},
        'startTouchDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'Boolean', optional: true },{ index: 3, type: 'flash.geom.Rectangle', optional: true } ]; }},
        'stopDrag': { type: 'void', declaredBy: 'flash.display.Sprite'},
        'stopTouchDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [  { index: 1, type: 'int', optional: false } ]; }}
      };
    }
  };
};
