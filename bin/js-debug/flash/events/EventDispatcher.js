/**
 * Generated by Apache Royale Compiler from flash\events\EventDispatcher.as
 * flash.events.EventDispatcher
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.events.EventDispatcher');
/* Royale Dependency List: flash.events.Event,org.xfltools.core.EventListener,org.apache.royale.utils.Language,XML*/

goog.require('flash.events.IEventDispatcher');
goog.require('org.xfltools.core.FlashJSObject');



/**
 * @constructor
 * @extends {org.xfltools.core.FlashJSObject}
 * @implements {flash.events.IEventDispatcher}
 * @param {flash.events.IEventDispatcher=} target
 */
flash.events.EventDispatcher = function(target) {
  flash.events.EventDispatcher.base(this, 'constructor');
  target = typeof target !== 'undefined' ? target : null;
  this._javascriptImplementation = window["flashjs_events_EventDispatcher_construct"]();
  this._eventListeners = org.apache.royale.utils.Language.Vector();
};
goog.inherits(flash.events.EventDispatcher, org.xfltools.core.FlashJSObject);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.events.EventDispatcher', flash.events.EventDispatcher);


/**
 * @private
 * @type {Array}
 */
flash.events.EventDispatcher.prototype._eventListeners;


/**
 * @private
 * @type {Object}
 */
flash.events.EventDispatcher.prototype._createJSTicker;


/**
 * @protected
 */
flash.events.EventDispatcher.prototype.startFrameTicker = function() {
  this._createJSTicker = window["getCreateJSTicker"]();
  this._createJSTicker.addEventListener(flash.events.Event.TICK, org.apache.royale.utils.Language.closure(this.dispatchEnterFrame, this, 'dispatchEnterFrame'));
};


/**
 * Create JS only "ticks" objects in the display list whereas flash ticks everything.
 * @protected
 * @param {Object} event
 */
flash.events.EventDispatcher.prototype.dispatchEnterFrame = function(event) {
  this.dispatchEvent(new flash.events.Event(flash.events.Event.ENTER_FRAME));
};


/**
 * TODO - home brew events system doesn't bubble events up and down the display list yet, only adds an event listener to this object
 * @export
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 * @param {number=} priority
 * @param {boolean=} useWeakReference
 */
flash.events.EventDispatcher.prototype.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  priority = typeof priority !== 'undefined' ? priority : 0;
  useWeakReference = typeof useWeakReference !== 'undefined' ? useWeakReference : false;
  if (type == flash.events.Event.ENTER_FRAME && this._createJSTicker == null) {
    this._createJSTicker = window["getCreateJSTicker"]();
    this._createJSTicker.addEventListener(flash.events.Event.TICK, org.apache.royale.utils.Language.closure(this.dispatchEnterFrame, this, 'dispatchEnterFrame'));
  }
  var /** @type {number} */ numListeners = this._eventListeners.length;
  for (var /** @type {number} */ i = 0; i < numListeners; i++) {
    if (this._eventListeners[i].matches(type, listener)) {
      return;
    }
  }
  this._eventListeners.push(new org.xfltools.core.EventListener(type, listener));
};


/**
 * @export
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
flash.events.EventDispatcher.prototype.removeEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  var /** @type {number} */ numListeners = this._eventListeners.length;
  for (var /** @type {number} */ i = numListeners - 1; i >= 0; i--) {
    if (this._eventListeners[i].matches(type, listener)) {
      this._eventListeners.splice(i, 1);
    }
  }
};


/**
 * @export
 * @param {flash.events.Event} event
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.dispatchEvent = function(event) {
  event.target = this;
  var foreachiter0_target = this._eventListeners;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var eventListener = foreachiter0_target[foreachiter0];
  {
    eventListener.respondToEvent(event);
  }}
  
  return true;
};


/**
 * @export
 * @param {string} type
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.hasEventListener = function(type) {
  return this._javascriptImplementation.hasEventListener(type);
};


/**
 * @export
 * @param {string} type
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.willTrigger = function(type) {
  return this._javascriptImplementation.willTrigger(type);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.events.EventDispatcher.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventDispatcher', qName: 'flash.events.EventDispatcher', kind: 'class' }], interfaces: [flash.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.events.EventDispatcher.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'EventDispatcher': { type: '', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'flash.events.IEventDispatcher', optional: true } ]; }},
        'addEventListener': { type: 'void', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false },{ index: 3, type: 'Boolean', optional: true },{ index: 4, type: 'int', optional: true },{ index: 5, type: 'Boolean', optional: true } ]; }},
        'removeEventListener': { type: 'void', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false },{ index: 3, type: 'Boolean', optional: true } ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'flash.events.Event', optional: false } ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'willTrigger': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};
