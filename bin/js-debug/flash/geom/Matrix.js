/**
 * Generated by Apache Royale Compiler from flash\geom\Matrix.as
 * flash.geom.Matrix
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.geom.Matrix');
/* Royale Dependency List: flash.geom.Point,flash.geom.Vector3D,XML*/

goog.require('org.xfltools.core.FlashJSObject');



/**
 * @constructor
 * @extends {org.xfltools.core.FlashJSObject}
 * @param {number=} a
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix = function(a, b, c, d, tx, ty) {
  flash.geom.Matrix.base(this, 'constructor');
  a = typeof a !== 'undefined' ? a : 1;
  b = typeof b !== 'undefined' ? b : 0;
  c = typeof c !== 'undefined' ? c : 0;
  d = typeof d !== 'undefined' ? d : 1;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  this._javascriptImplementation = window["flashjs_geom_Matrix_construct"](a, b, c, d, tx, ty);
};
goog.inherits(flash.geom.Matrix, org.xfltools.core.FlashJSObject);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.geom.Matrix', flash.geom.Matrix);


/**
 * @private
 * @const
 * @type {number}
 */
flash.geom.Matrix.GRADIENT_SCALE_FACTOR = 1638.4;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillX0;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillY0;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillX1;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillY1;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillRadius0;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype._cjsGradientFillRadius1;


/**
 * @export
 * @return {flash.geom.Matrix}
 */
flash.geom.Matrix.prototype.clone = function() {
  return new flash.geom.Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
};


/**
 * @export
 * @param {flash.geom.Matrix} m
 */
flash.geom.Matrix.prototype.concat = function(m) {
  this._javascriptImplementation.appendMatrix(m.javascriptImplementation);
};


/**
 * @export
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyColumnFrom = function(column, vector3D) {
  switch (column) {
    case 0:
      this.a = vector3D.x;
      this.b = vector3D.y;
      break;
    case 1:
      this.c = vector3D.x;
      this.d = vector3D.y;
      break;
    case 2:
      this.tx = vector3D.x;
      this.ty = vector3D.y;
      break;
    default:
      break;
  }
};


/**
 * @export
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyColumnTo = function(column, vector3D) {
  switch (column) {
    case 0:
      vector3D.x = this.a;
      vector3D.y = this.b;
      break;
    case 1:
      vector3D.x = this.c;
      vector3D.y = this.d;
      break;
    case 2:
      vector3D.x = this.tx;
      vector3D.y = this.ty;
      break;
    default:
      break;
  }
};


/**
 * @export
 * @param {flash.geom.Matrix} sourceMatrix
 */
flash.geom.Matrix.prototype.copyFrom = function(sourceMatrix) {
  this.a = sourceMatrix.a;
  this.b = sourceMatrix.b;
  this.c = sourceMatrix.a;
  this.d = sourceMatrix.a;
  this.tx = sourceMatrix.a;
  this.ty = sourceMatrix.a;
};


/**
 * @export
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyRowFrom = function(row, vector3D) {
  switch (row) {
    case 0:
      this.a = vector3D.x;
      this.c = vector3D.y;
      this.tx = vector3D.z;
      break;
    case 1:
      this.b = vector3D.x;
      this.d = vector3D.y;
      this.ty = vector3D.z;
      break;
    default:
      break;
  }
};


/**
 * @export
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyRowTo = function(row, vector3D) {
  switch (row) {
    case 0:
      vector3D.x = this.a;
      vector3D.y = this.c;
      vector3D.z = this.tx;
      break;
    case 1:
      vector3D.x = this.b;
      vector3D.y = this.d;
      vector3D.z = this.ty;
      break;
    default:
      break;
  }
};


/**
 * @export
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number=} rotation
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix.prototype.createBox = function(scaleX, scaleY, rotation, tx, ty) {
  rotation = typeof rotation !== 'undefined' ? rotation : 0;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  this.a = Math.cos(rotation) * scaleX;
  this.b = Math.sin(rotation);
  this.c = -1 * Math.sin(rotation);
  this.d = Math.cos(rotation) * scaleY;
  this.tx = tx;
  this.ty = ty;
};


/**
 * @export
 * @param {number} width
 * @param {number} height
 * @param {number=} rotation
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix.prototype.createGradientBox = function(width, height, rotation, tx, ty) {
  rotation = typeof rotation !== 'undefined' ? rotation : 0;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  this.a = Math.cos(rotation) * (width / flash.geom.Matrix.GRADIENT_SCALE_FACTOR);
  this.b = Math.sin(rotation);
  this.c = -1 * Math.sin(rotation);
  this.d = Math.cos(rotation) * (height / flash.geom.Matrix.GRADIENT_SCALE_FACTOR);
  this.tx = tx + (width / 2);
  this.ty = ty + (height / 2);
};


/**
 * @export
 * @param {boolean=} radial
 */
flash.geom.Matrix.prototype.cacheCjsLinearGradientValues = function(radial) {
  radial = typeof radial !== 'undefined' ? radial : false;
  var /** @type {number} */ rotation = Math.asin(this.b);
  var /** @type {number} */ width = (this.a / Math.cos(rotation)) * flash.geom.Matrix.GRADIENT_SCALE_FACTOR;
  var /** @type {number} */ height = (this.d / Math.cos(rotation)) * flash.geom.Matrix.GRADIENT_SCALE_FACTOR;
  var /** @type {number} */ xOffset = this.tx - width / 2;
  var /** @type {number} */ yOffset = this.ty - height / 2;
  var /** @type {number} */ originX = 0;
  var /** @type {number} */ originY = 0;
  var /** @type {number} */ destinationX = 0;
  var /** @type {number} */ destinationY = 0;
  if (rotation == 0) {
    originX = 0;
    originY = 0;
    destinationX = 1;
    destinationY = 0;
  } else if (rotation > 0 && rotation < Math.PI / 4) {
    originX = 0;
    originY = 0;
    destinationX = 1;
    destinationY = Math.tan(rotation);
  } else if (rotation == Math.PI / 4) {
    originX = 0;
    originY = 0;
    destinationX = 1;
    destinationY = 1;
  } else if (rotation > Math.PI / 4 && rotation < Math.PI / 2) {
    originX = 0;
    originY = 0;
    destinationX = Math.tan(Math.PI / 2 - rotation);
    destinationY = 1;
  } else if (rotation == Math.PI / 2) {
    originX = 0;
    originY = 0;
    destinationX = 0;
    destinationY = 1;
  } else if (rotation > Math.PI / 2 && rotation < Math.PI * 0.75) {
    originX = 1;
    originY = 0;
    destinationX = Math.tan(rotation - Math.PI / 2);
    destinationY = 1;
  } else if (rotation == Math.PI * 0.75) {
    originX = 1;
    originY = 0;
    destinationX = 0;
    destinationY = 1;
  } else if (rotation > Math.PI * 0.75 && rotation < Math.PI) {
    originX = 1;
    originY = 0;
    destinationX = 0;
    destinationY = Math.tan(Math.PI - rotation);
  } else if (rotation == Math.PI) {
    originX = 1;
    originY = 0;
    destinationX = 0;
    destinationY = 0;
  } else if (rotation > Math.PI && rotation < Math.PI * 1.25) {
    originX = 1;
    originY = 1;
    destinationX = 0;
    destinationY = -Math.tan(rotation - Math.PI);
  } else if (rotation == Math.PI * 1.25) {
    originX = 1;
    originY = 1;
    destinationX = 0;
    destinationY = 0;
  } else if (rotation > Math.PI * 1.25 && rotation < Math.PI * 1.5) {
    originX = 1;
    originY = 1;
    destinationX = Math.tan(Math.PI * 1.5 - rotation);
    destinationY = 0;
  } else if (rotation == Math.PI * 1.5) {
    originX = 0;
    originY = 1;
    destinationX = 0;
    destinationY = 0;
  } else if (rotation > Math.PI * 1.5 && rotation < Math.PI * 1.75) {
    originX = 0;
    originY = 1;
    destinationX = Math.tan(rotation - Math.PI * 1.5);
    destinationY = 0;
  } else if (rotation == Math.PI * 1.75) {
    originX = 0;
    originY = 1;
    destinationX = 1;
    destinationY = 0;
  } else if (rotation > Math.PI * 1.75 && rotation < Math.PI * 2) {
    originX = 0;
    originY = 1;
    destinationX = 1;
    destinationY = Math.tan(Math.PI * 2 - rotation);
  }
  this._cjsGradientFillX0 = originX * width + xOffset;
  this._cjsGradientFillY0 = originY * height + yOffset;
  this._cjsGradientFillX1 = destinationX * width + xOffset;
  this._cjsGradientFillY1 = destinationY * height + yOffset;
};


/**
 * @export
 */
flash.geom.Matrix.prototype.cacheCjsRadialGradientValues = function() {
  var /** @type {number} */ rotation = Math.asin(this.b);
  var /** @type {number} */ width = (this.a / Math.cos(rotation)) * flash.geom.Matrix.GRADIENT_SCALE_FACTOR;
  var /** @type {number} */ height = (this.d / Math.cos(rotation)) * flash.geom.Matrix.GRADIENT_SCALE_FACTOR;
  var /** @type {number} */ xOffset = this.tx - width / 2;
  var /** @type {number} */ yOffset = this.ty - height / 2;
  this._cjsGradientFillX0 = this._cjsGradientFillX1 = width / 2 + xOffset;
  this._cjsGradientFillY0 = this._cjsGradientFillY1 = height / 2 + yOffset;
  this._cjsGradientFillRadius0 = 0;
  this._cjsGradientFillRadius1 = width / 2;
};


/**
 * @export
 * @param {flash.geom.Point} point
 * @return {flash.geom.Point}
 */
flash.geom.Matrix.prototype.deltaTransformPoint = function(point) {
  var /** @type {flash.geom.Matrix} */ deltaMatrix = this.clone();
  deltaMatrix.tx = 0;
  deltaMatrix.ty = 0;
  var /** @type {Object} */ result = deltaMatrix.javascriptImplementation.transformPoint(point.x, point.y);
  return new flash.geom.Point(result.x, result.y);
};


/**
 * @export
 */
flash.geom.Matrix.prototype.identity = function() {
  this.a = 1;
  this.b = 0;
  this.c = 0;
  this.d = 1;
  this.tx = 0;
  this.ty = 0;
};


/**
 * @export
 */
flash.geom.Matrix.prototype.invert = function() {
  this._javascriptImplementation.invert();
};


/**
 * @export
 * @param {number} angle
 */
flash.geom.Matrix.prototype.rotate = function(angle) {
  this._javascriptImplementation.rotate(angle);
};


/**
 * @export
 * @param {number} sx
 * @param {number} sy
 */
flash.geom.Matrix.prototype.scale = function(sx, sy) {
  this._javascriptImplementation.scale(sx, sy);
};


/**
 * @export
 * @param {number} aa
 * @param {number} ba
 * @param {number} ca
 * @param {number} da
 * @param {number} txa
 * @param {number} tya
 */
flash.geom.Matrix.prototype.setTo = function(aa, ba, ca, da, txa, tya) {
  this.a = aa;
  this.b = ba;
  this.c = ca;
  this.d = da;
  this.tx = txa;
  this.ty = tya;
};


/**
 * @export
 * @return {string}
 */
flash.geom.Matrix.prototype.toString = function() {
  return "(a=" + this.a.toString() + ", b=" + this.b.toString() + ", c=" + this.c.toString() + ", d=" + this.d.toString() + ", tx=" + this.tx.toString() + ", ty=" + this.ty.toString() + ")";
};


/**
 * @export
 * @param {flash.geom.Point} point
 * @return {flash.geom.Point}
 */
flash.geom.Matrix.prototype.transformPoint = function(point) {
  var /** @type {Object} */ result = this._javascriptImplementation.transformPoint(point.x, point.y);
  return new flash.geom.Point(result.x, result.y);
};


/**
 * @export
 * @param {number} dx
 * @param {number} dy
 */
flash.geom.Matrix.prototype.translate = function(dx, dy) {
  this.tx += dx;
  this.ty += dy;
};


flash.geom.Matrix.prototype.get__cjsGradientFillX0 = function() {
  return this._cjsGradientFillX0;
};


flash.geom.Matrix.prototype.get__cjsGradientFillY0 = function() {
  return this._cjsGradientFillY0;
};


flash.geom.Matrix.prototype.get__cjsGradientFillX1 = function() {
  return this._cjsGradientFillX1;
};


flash.geom.Matrix.prototype.get__cjsGradientFillY1 = function() {
  return this._cjsGradientFillY1;
};


flash.geom.Matrix.prototype.get__cjsGradientFillRadius0 = function() {
  return this._cjsGradientFillRadius0;
};


flash.geom.Matrix.prototype.get__cjsGradientFillRadius1 = function() {
  return this._cjsGradientFillRadius1;
};


flash.geom.Matrix.prototype.get__a = function() {
  return this._javascriptImplementation.a;
};


flash.geom.Matrix.prototype.set__a = function(newValue) {
  this._javascriptImplementation.a = newValue;
};


flash.geom.Matrix.prototype.get__b = function() {
  return this._javascriptImplementation.b;
};


flash.geom.Matrix.prototype.set__b = function(newValue) {
  this._javascriptImplementation.b = newValue;
};


flash.geom.Matrix.prototype.get__c = function() {
  return this._javascriptImplementation.c;
};


flash.geom.Matrix.prototype.set__c = function(newValue) {
  this._javascriptImplementation.c = newValue;
};


flash.geom.Matrix.prototype.get__d = function() {
  return this._javascriptImplementation.d;
};


flash.geom.Matrix.prototype.set__d = function(newValue) {
  this._javascriptImplementation.d = newValue;
};


flash.geom.Matrix.prototype.get__tx = function() {
  return this._javascriptImplementation.tx;
};


flash.geom.Matrix.prototype.set__tx = function(newValue) {
  this._javascriptImplementation.tx = newValue;
};


flash.geom.Matrix.prototype.get__ty = function() {
  return this._javascriptImplementation.ty;
};


flash.geom.Matrix.prototype.set__ty = function(newValue) {
  this._javascriptImplementation.ty = newValue;
};


Object.defineProperties(flash.geom.Matrix.prototype, /** @lends {flash.geom.Matrix.prototype} */ {
/**
  * @export
  * @type {number} */
cjsGradientFillX0: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillX0},
/**
  * @export
  * @type {number} */
cjsGradientFillY0: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillY0},
/**
  * @export
  * @type {number} */
cjsGradientFillX1: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillX1},
/**
  * @export
  * @type {number} */
cjsGradientFillY1: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillY1},
/**
  * @export
  * @type {number} */
cjsGradientFillRadius0: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillRadius0},
/**
  * @export
  * @type {number} */
cjsGradientFillRadius1: {
get: flash.geom.Matrix.prototype.get__cjsGradientFillRadius1},
/**
  * @export
  * @type {number} */
a: {
get: flash.geom.Matrix.prototype.get__a,
set: flash.geom.Matrix.prototype.set__a},
/**
  * @export
  * @type {number} */
b: {
get: flash.geom.Matrix.prototype.get__b,
set: flash.geom.Matrix.prototype.set__b},
/**
  * @export
  * @type {number} */
c: {
get: flash.geom.Matrix.prototype.get__c,
set: flash.geom.Matrix.prototype.set__c},
/**
  * @export
  * @type {number} */
d: {
get: flash.geom.Matrix.prototype.get__d,
set: flash.geom.Matrix.prototype.set__d},
/**
  * @export
  * @type {number} */
tx: {
get: flash.geom.Matrix.prototype.get__tx,
set: flash.geom.Matrix.prototype.set__tx},
/**
  * @export
  * @type {number} */
ty: {
get: flash.geom.Matrix.prototype.get__ty,
set: flash.geom.Matrix.prototype.set__ty}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.geom.Matrix.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Matrix', qName: 'flash.geom.Matrix', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.geom.Matrix.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'cjsGradientFillX0': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'cjsGradientFillY0': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'cjsGradientFillX1': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'cjsGradientFillY1': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'cjsGradientFillRadius0': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'cjsGradientFillRadius1': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix'},
        'a': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'},
        'b': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'},
        'c': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'},
        'd': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'},
        'tx': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'},
        'ty': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Matrix'}
      };
    },
    methods: function () {
      return {
        'Matrix': { type: '', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: true },{ index: 2, type: 'Number', optional: true },{ index: 3, type: 'Number', optional: true },{ index: 4, type: 'Number', optional: true },{ index: 5, type: 'Number', optional: true },{ index: 6, type: 'Number', optional: true } ]; }},
        'clone': { type: 'flash.geom.Matrix', declaredBy: 'flash.geom.Matrix'},
        'concat': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'flash.geom.Matrix', optional: false } ]; }},
        'copyColumnFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'copyColumnTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'copyFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'flash.geom.Matrix', optional: false } ]; }},
        'copyRowFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'copyRowTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'createBox': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true },{ index: 4, type: 'Number', optional: true },{ index: 5, type: 'Number', optional: true } ]; }},
        'createGradientBox': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: true },{ index: 4, type: 'Number', optional: true },{ index: 5, type: 'Number', optional: true } ]; }},
        'cacheCjsLinearGradientValues': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Boolean', optional: true } ]; }},
        'cacheCjsRadialGradientValues': { type: 'void', declaredBy: 'flash.geom.Matrix'},
        'deltaTransformPoint': { type: 'flash.geom.Point', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'flash.geom.Point', optional: false } ]; }},
        'identity': { type: 'void', declaredBy: 'flash.geom.Matrix'},
        'invert': { type: 'void', declaredBy: 'flash.geom.Matrix'},
        'rotate': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'scale': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }},
        'setTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false },{ index: 4, type: 'Number', optional: false },{ index: 5, type: 'Number', optional: false },{ index: 6, type: 'Number', optional: false } ]; }},
        'toString': { type: 'String', declaredBy: 'flash.geom.Matrix'},
        'transformPoint': { type: 'flash.geom.Point', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'flash.geom.Point', optional: false } ]; }},
        'translate': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false } ]; }}
      };
    }
  };
};
