/**
 * Generated by Apache Royale Compiler from flash\geom\Vector3D.as
 * flash.geom.Vector3D
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.geom.Vector3D');
/* Royale Dependency List: XML*/
/* Royale Static Dependency List: flash.geom.Vector3D*/



/**
 * @constructor
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @param {number=} w
 */
flash.geom.Vector3D = function(x, y, z, w) {
  x = typeof x !== 'undefined' ? x : 0;
  y = typeof y !== 'undefined' ? y : 0;
  z = typeof z !== 'undefined' ? z : 0;
  w = typeof w !== 'undefined' ? w : 0;
  this._x = x;
  this._y = y;
  this._z = z;
  this._w = w;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.geom.Vector3D', flash.geom.Vector3D);


/**
 * @export
 * @const
 * @type {flash.geom.Vector3D}
 */
flash.geom.Vector3D.X_AXIS;


/**
 * @export
 * @const
 * @type {flash.geom.Vector3D}
 */
flash.geom.Vector3D.Y_AXIS;


/**
 * @export
 * @const
 * @type {flash.geom.Vector3D}
 */
flash.geom.Vector3D.Z_AXIS;


/**
 * @private
 * @type {number}
 */
flash.geom.Vector3D.prototype._x;


/**
 * @private
 * @type {number}
 */
flash.geom.Vector3D.prototype._y;


/**
 * @private
 * @type {number}
 */
flash.geom.Vector3D.prototype._z;


/**
 * @private
 * @type {number}
 */
flash.geom.Vector3D.prototype._w;


/**
 * @export
 * @param {flash.geom.Vector3D} a
 * @return {flash.geom.Vector3D}
 */
flash.geom.Vector3D.prototype.add = function(a) {
  this._x = a.x;
  this._y = a.y;
  this._z = a.z;
  this._w = a.w;
  return this.clone();
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 * @param {flash.geom.Vector3D} b
 * @return {number}
 */
flash.geom.Vector3D.angleBetween = function(a, b) {
  return 0;
};


/**
 * @export
 * @return {flash.geom.Vector3D}
 */
flash.geom.Vector3D.prototype.clone = function() {
  return new flash.geom.Vector3D(this._x, this._y, this._z, this._w);
};


/**
 * @export
 * @param {flash.geom.Vector3D} sourceVector3D
 */
flash.geom.Vector3D.prototype.copyFrom = function(sourceVector3D) {
  this._x = sourceVector3D.x;
  this._y = sourceVector3D.y;
  this._z = sourceVector3D.z;
  this._w = sourceVector3D.w;
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 * @return {flash.geom.Vector3D}
 */
flash.geom.Vector3D.prototype.crossProduct = function(a) {
  return null;
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 */
flash.geom.Vector3D.prototype.decrementBy = function(a) {
  this._x -= a.x;
  this._y -= a.y;
  this._z -= a.z;
};


/**
 * @export
 * @param {flash.geom.Vector3D} pt1
 * @param {flash.geom.Vector3D} pt2
 * @return {number}
 */
flash.geom.Vector3D.distance = function(pt1, pt2) {
  return 0;
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 * @return {number}
 */
flash.geom.Vector3D.prototype.dotProduct = function(a) {
  return 0;
};


/**
 * @export
 * @param {flash.geom.Vector3D} toCompare
 * @param {boolean=} allFour
 * @return {boolean}
 */
flash.geom.Vector3D.prototype.equals = function(toCompare, allFour) {
  allFour = typeof allFour !== 'undefined' ? allFour : false;
  var /** @type {boolean} */ result = (this._x == toCompare.x && this._y == toCompare.y && this._z == toCompare.z);
  if (allFour) {
    result = (result && this._w == toCompare.w);
  }
  return result;
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 */
flash.geom.Vector3D.prototype.incrementBy = function(a) {
  this._x += a.x;
  this._y += a.y;
  this._z += a.z;
};


/**
 * @export
 * @param {flash.geom.Vector3D} toCompare
 * @param {number} tolerance
 * @param {boolean=} allFour
 * @return {boolean}
 */
flash.geom.Vector3D.prototype.nearEquals = function(toCompare, tolerance, allFour) {
  allFour = typeof allFour !== 'undefined' ? allFour : false;
  return false;
};


/**
 * @export
 */
flash.geom.Vector3D.prototype.negate = function() {
  this._x *= -1;
  this._y *= -1;
  this._z *= -1;
};


/**
 * @export
 * @return {number}
 */
flash.geom.Vector3D.prototype.normalize = function() {
  return 0;
};


/**
 * @export
 */
flash.geom.Vector3D.prototype.project = function() {
  this._x = this._x / this._w;
  this._y = this._y / this._w;
  this._z = this._z / this._w;
};


/**
 * @export
 * @param {number} s
 */
flash.geom.Vector3D.prototype.scaleBy = function(s) {
  this._x *= s;
  this._y *= s;
  this._z *= s;
};


/**
 * @export
 * @param {number} xa
 * @param {number} ya
 * @param {number} za
 */
flash.geom.Vector3D.prototype.setTo = function(xa, ya, za) {
  this._x = xa;
  this._y = ya;
  this._z = za;
};


/**
 * @export
 * @param {flash.geom.Vector3D} a
 * @return {flash.geom.Vector3D}
 */
flash.geom.Vector3D.prototype.subtract = function(a) {
  return new flash.geom.Vector3D(a.x - this._x, a.y - this._y, a.z - this._z);
};


/**
 * @export
 * @return {string}
 */
flash.geom.Vector3D.prototype.toString = function() {
  return "";
};


flash.geom.Vector3D.prototype.get__length = function() {
  return 0;
};


flash.geom.Vector3D.prototype.get__lengthSquared = function() {
  return 0;
};


flash.geom.Vector3D.prototype.get__x = function() {
  return this._x;
};


flash.geom.Vector3D.prototype.set__x = function(newValue) {
  this._x = newValue;
};


flash.geom.Vector3D.prototype.get__y = function() {
  return this._y;
};


flash.geom.Vector3D.prototype.set__y = function(newValue) {
  this._y = newValue;
};


flash.geom.Vector3D.prototype.get__z = function() {
  return this._z;
};


flash.geom.Vector3D.prototype.set__z = function(newValue) {
  this._z = newValue;
};


flash.geom.Vector3D.prototype.get__w = function() {
  return this._w;
};


flash.geom.Vector3D.prototype.set__w = function(newValue) {
  this._w = newValue;
};


Object.defineProperties(flash.geom.Vector3D.prototype, /** @lends {flash.geom.Vector3D.prototype} */ {
/**
  * @export
  * @type {number} */
length: {
get: flash.geom.Vector3D.prototype.get__length},
/**
  * @export
  * @type {number} */
lengthSquared: {
get: flash.geom.Vector3D.prototype.get__lengthSquared},
/**
  * @export
  * @type {number} */
x: {
get: flash.geom.Vector3D.prototype.get__x,
set: flash.geom.Vector3D.prototype.set__x},
/**
  * @export
  * @type {number} */
y: {
get: flash.geom.Vector3D.prototype.get__y,
set: flash.geom.Vector3D.prototype.set__y},
/**
  * @export
  * @type {number} */
z: {
get: flash.geom.Vector3D.prototype.get__z,
set: flash.geom.Vector3D.prototype.set__z},
/**
  * @export
  * @type {number} */
w: {
get: flash.geom.Vector3D.prototype.get__w,
set: flash.geom.Vector3D.prototype.set__w}}
);

flash.geom.Vector3D.X_AXIS = new flash.geom.Vector3D(1, 0, 0);
flash.geom.Vector3D.Y_AXIS = new flash.geom.Vector3D(0, 1, 0);
flash.geom.Vector3D.Z_AXIS = new flash.geom.Vector3D(0, 0, 1);




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.geom.Vector3D.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Vector3D', qName: 'flash.geom.Vector3D', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.geom.Vector3D.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'length': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Vector3D'},
        'lengthSquared': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Vector3D'},
        'x': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Vector3D'},
        'y': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Vector3D'},
        'z': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Vector3D'},
        'w': { type: 'Number', access: 'readwrite', declaredBy: 'flash.geom.Vector3D'}
      };
    },
    methods: function () {
      return {
        'Vector3D': { type: '', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'Number', optional: true },{ index: 2, type: 'Number', optional: true },{ index: 3, type: 'Number', optional: true },{ index: 4, type: 'Number', optional: true } ]; }},
        'add': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        '|angleBetween': { type: 'Number', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'clone': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Vector3D'},
        'copyFrom': { type: 'void', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'crossProduct': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'decrementBy': { type: 'void', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        '|distance': { type: 'Number', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false },{ index: 2, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'dotProduct': { type: 'Number', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'equals': { type: 'Boolean', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false },{ index: 2, type: 'Boolean', optional: true } ]; }},
        'incrementBy': { type: 'void', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'nearEquals': { type: 'Boolean', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Boolean', optional: true } ]; }},
        'negate': { type: 'void', declaredBy: 'flash.geom.Vector3D'},
        'normalize': { type: 'Number', declaredBy: 'flash.geom.Vector3D'},
        'project': { type: 'void', declaredBy: 'flash.geom.Vector3D'},
        'scaleBy': { type: 'void', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'setTo': { type: 'void', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'Number', optional: false },{ index: 2, type: 'Number', optional: false },{ index: 3, type: 'Number', optional: false } ]; }},
        'subtract': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Vector3D', parameters: function () { return [  { index: 1, type: 'flash.geom.Vector3D', optional: false } ]; }},
        'toString': { type: 'String', declaredBy: 'flash.geom.Vector3D'}
      };
    }
  };
};
