/**
 * Generated by Apache Royale Compiler from flash\utils\ByteArray.as
 * flash.utils.ByteArray
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.utils.ByteArray');
/* Royale Dependency List: org.apache.royale.utils.BinaryData,XML*/




/**
 * Creates a ByteArray instance representing a packed array of bytes, so that you can use the methods and properties in this class to optimize your data storage and stream.
 * @constructor
 */
flash.utils.ByteArray = function() {
  this._binaryData = new org.apache.royale.utils.BinaryData();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('flash.utils.ByteArray', flash.utils.ByteArray);


/**
 * @private
 * @type {org.apache.royale.utils.BinaryData}
 */
flash.utils.ByteArray.prototype._binaryData;


/**
 * In a single atomic operation, compares an integer value in this byte array with another integer value and, if they match, swaps those bytes with another value.
 * Please note that this is emulated for compatibility so won't be useful for performance
 * @export
 * @param {number} byteIndex
 * @param {number} expectedValue
 * @param {number} newValue
 * @return {number}
 */
flash.utils.ByteArray.prototype.atomicCompareAndSwapIntAt = function(byteIndex, expectedValue, newValue) {
  if (this._binaryData.length <= byteIndex) {
    throw new Error("Error, index out of bounds");
  }
  var /** @type {number} */ oldValue = Number(this._binaryData.array[byteIndex]);
  if (this._binaryData.array[byteIndex] == expectedValue) {
    this._binaryData.writeByteAt(byteIndex, newValue);
  }
  return oldValue;
};


/**
 * In a single atomic operation, compares this byte array's length with a provided value and, if they match, changes the length of this byte array.
 * Please note that this is emulated for compatibility so won't be useful for performance
 * @export
 * @param {number} expectedLength
 * @param {number} newLength
 * @return {number}
 */
flash.utils.ByteArray.prototype.atomicCompareAndSwapLength = function(expectedLength, newLength) {
  var /** @type {number} */ oldValue = this._binaryData.length;
  if (this._binaryData.length == expectedLength) {
    this._binaryData.length = newLength;
  }
  return oldValue;
};


/**
 * @export
 */
flash.utils.ByteArray.prototype.clear = function() {
  this._binaryData.length = 0;
};


/**
 * Compresses the byte array.
 * @export
 * @param {string} algorithm
 */
flash.utils.ByteArray.prototype.compress = function(algorithm) {
};


/**
 * Compresses the byte array using the deflate compression algorithm.
 * @export
 */
flash.utils.ByteArray.prototype.deflate = function() {
};


/**
 * Decompresses the byte array using the deflate compression algorithm.
 * @export
 */
flash.utils.ByteArray.prototype.inflate = function() {
};


/**
 * Reads a Boolean value from the byte stream.
 * @export
 * @return {boolean}
 */
flash.utils.ByteArray.prototype.readBoolean = function() {
  return this._binaryData.readBoolean();
};


/**
 * Reads a signed byte from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readByte = function() {
  return this._binaryData.readByte();
};


/**
 * Reads the number of data bytes, specified by the length parameter, from the byte stream.
 * @export
 * @param {flash.utils.ByteArray} bytes
 * @param {number=} offset
 * @param {number=} length
 */
flash.utils.ByteArray.prototype.readBytes = function(bytes, offset, length) {
  offset = typeof offset !== 'undefined' ? offset : 0;
  length = typeof length !== 'undefined' ? length : 0;
  this._binaryData.readBytes(bytes.binaryData, offset, length);
};


/**
 * Reads an IEEE 754 double-precision (64-bit) floating-point number from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readDouble = function() {
  return this._binaryData.readDouble();
};


/**
 * Reads an IEEE 754 single-precision (32-bit) floating-point number from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readFloat = function() {
  return this._binaryData.readFloat();
};


/**
 * Reads a signed 32-bit integer from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readInt = function() {
  return this._binaryData.readInt();
};


/**
 * Reads a multibyte string of specified length from the byte stream using the specified character set.
 * @export
 * @param {number} length
 * @param {string} charSet
 * @return {string}
 */
flash.utils.ByteArray.prototype.readMultiByte = function(length, charSet) {
  return "";
};


/**
 * Reads an object from the byte array, encoded in AMF serialized format.
 * @export
 * @return {*}
 */
flash.utils.ByteArray.prototype.readObject = function() {
  return null;
};


/**
 * Reads a signed 16-bit integer from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readShort = function() {
  return this._binaryData.readShort();
};


/**
 * Reads an unsigned byte from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readUnsignedByte = function() {
  return this._binaryData.readUnsignedByte();
};


/**
 * Reads an unsigned 32-bit integer from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readUnsignedInt = function() {
  return this._binaryData.readUnsignedInt();
};


/**
 * Reads an unsigned 16-bit integer from the byte stream.
 * @export
 * @return {number}
 */
flash.utils.ByteArray.prototype.readUnsignedShort = function() {
  return this._binaryData.readUnsignedShort();
};


/**
 * Reads a UTF-8 string from the byte stream.
 * @export
 * @return {string}
 */
flash.utils.ByteArray.prototype.readUTF = function() {
  return this._binaryData.readUTF();
};


/**
 * Reads a sequence of UTF-8 bytes specified by the length parameter from the byte stream and returns a string.
 * @export
 * @param {number} length
 * @return {string}
 */
flash.utils.ByteArray.prototype.readUTFBytes = function(length) {
  return this._binaryData.readUTFBytes(length);
};


/**
 * Converts the byte array to a string.
 * @export
 * @return {string}
 */
flash.utils.ByteArray.prototype.toString = function() {
  return "";
};


/**
 * Decompresses the byte array.
 * @export
 * @param {string} algorithm
 */
flash.utils.ByteArray.prototype.uncompress = function(algorithm) {
};


/**
 * Writes a Boolean value.
 * @export
 * @param {boolean} value
 */
flash.utils.ByteArray.prototype.writeBoolean = function(value) {
  this._binaryData.writeBoolean(value);
};


/**
 * Writes a byte to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeByte = function(value) {
  this._binaryData.writeByte(value);
};


/**
 * Writes a sequence of length bytes from the specified byte array, bytes, starting offset(zero-based index) bytes into the byte stream.
 * @export
 * @param {flash.utils.ByteArray} bytes
 * @param {number=} offset
 * @param {number=} length
 */
flash.utils.ByteArray.prototype.writeBytes = function(bytes, offset, length) {
  offset = typeof offset !== 'undefined' ? offset : 0;
  length = typeof length !== 'undefined' ? length : 0;
  this._binaryData.writeBytes(bytes.binaryData, offset, length);
};


/**
 * Writes an IEEE 754 double-precision (64-bit) floating-point number to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeDouble = function(value) {
  this._binaryData.writeDouble(value);
};


/**
 * Writes an IEEE 754 single-precision (32-bit) floating-point number to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeFloat = function(value) {
  this._binaryData.writeFloat(value);
};


/**
 * Writes a 32-bit signed integer to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeInt = function(value) {
  this._binaryData.writeInt(value);
};


/**
 * Writes a multibyte string to the byte stream using the specified character set.
 * @export
 * @param {string} value
 * @param {string} charSet
 */
flash.utils.ByteArray.prototype.writeMultiByte = function(value, charSet) {
};


/**
 * Writes an object into the byte array in AMF serialized format.
 * @export
 * @param {*} object
 */
flash.utils.ByteArray.prototype.writeObject = function(object) {
};


/**
 * Writes a 16-bit integer to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeShort = function(value) {
  this._binaryData.writeShort(value);
};


/**
 * Writes a 32-bit unsigned integer to the byte stream.
 * @export
 * @param {number} value
 */
flash.utils.ByteArray.prototype.writeUnsignedInt = function(value) {
  this._binaryData.writeUnsignedInt(value);
};


/**
 * Writes a UTF-8 string to the byte stream.
 * @export
 * @param {string} value
 */
flash.utils.ByteArray.prototype.writeUTF = function(value) {
  this._binaryData.writeUTF(value);
};


/**
 * Writes a UTF-8 string to the byte stream.
 * @export
 * @param {string} value
 */
flash.utils.ByteArray.prototype.writeUTFBytes = function(value) {
  this._binaryData.writeUTFBytes(value);
};


flash.utils.ByteArray.prototype.get__binaryData = function() {
  return this._binaryData;
};


flash.utils.ByteArray.prototype.get__bytesAvailable = function() {
  return this._binaryData.bytesAvailable;
};


flash.utils.ByteArray.prototype.get__endian = function() {
  return this._binaryData.endian;
};


flash.utils.ByteArray.prototype.set__endian = function(value) {
  this._binaryData.endian = value;
};


flash.utils.ByteArray.prototype.get__length = function() {
  return this._binaryData.length;
};


flash.utils.ByteArray.prototype.set__length = function(value) {
  this._binaryData.length = value;
};


flash.utils.ByteArray.prototype.get__objectEncoding = function() {
  return 3;
};


flash.utils.ByteArray.prototype.set__objectEncoding = function(value) {
};


flash.utils.ByteArray.prototype.get__position = function() {
  return this._binaryData.position;
};


flash.utils.ByteArray.prototype.set__position = function(value) {
  this._binaryData.position = value;
};


flash.utils.ByteArray.prototype.get__shareable = function() {
  return false;
};


flash.utils.ByteArray.prototype.set__shareable = function(value) {
};


Object.defineProperties(flash.utils.ByteArray.prototype, /** @lends {flash.utils.ByteArray.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.utils.BinaryData} */
binaryData: {
get: flash.utils.ByteArray.prototype.get__binaryData},
/**
  * @export
  * @type {number} */
bytesAvailable: {
get: flash.utils.ByteArray.prototype.get__bytesAvailable},
/**
  * @export
  * @type {string} */
endian: {
get: flash.utils.ByteArray.prototype.get__endian,
set: flash.utils.ByteArray.prototype.set__endian},
/**
  * @export
  * @type {number} */
length: {
get: flash.utils.ByteArray.prototype.get__length,
set: flash.utils.ByteArray.prototype.set__length},
/**
  * @export
  * @type {number} */
objectEncoding: {
get: flash.utils.ByteArray.prototype.get__objectEncoding,
set: flash.utils.ByteArray.prototype.set__objectEncoding},
/**
  * @export
  * @type {number} */
position: {
get: flash.utils.ByteArray.prototype.get__position,
set: flash.utils.ByteArray.prototype.set__position},
/**
  * @export
  * @type {boolean} */
shareable: {
get: flash.utils.ByteArray.prototype.get__shareable,
set: flash.utils.ByteArray.prototype.set__shareable}}
);


flash.utils.ByteArray.get__defaultObjectEncoding = function() {
  return 0;
};


Object.defineProperties(flash.utils.ByteArray, /** @lends {flash.utils.ByteArray} */ {
/**
  * @export
  * @type {number} */
defaultObjectEncoding: {
get: flash.utils.ByteArray.get__defaultObjectEncoding}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.utils.ByteArray.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ByteArray', qName: 'flash.utils.ByteArray', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.utils.ByteArray.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'bytesAvailable': { type: 'uint', access: 'readonly', declaredBy: 'flash.utils.ByteArray'},
        '|defaultObjectEncoding': { type: 'uint', access: 'readonly', declaredBy: 'flash.utils.ByteArray'},
        'endian': { type: 'String', access: 'readwrite', declaredBy: 'flash.utils.ByteArray'},
        'length': { type: 'uint', access: 'readwrite', declaredBy: 'flash.utils.ByteArray'},
        'objectEncoding': { type: 'uint', access: 'readwrite', declaredBy: 'flash.utils.ByteArray'},
        'position': { type: 'uint', access: 'readwrite', declaredBy: 'flash.utils.ByteArray'},
        'shareable': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.utils.ByteArray'}
      };
    },
    methods: function () {
      return {
        'ByteArray': { type: '', declaredBy: 'flash.utils.ByteArray'},
        'atomicCompareAndSwapIntAt': { type: 'int', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'int', optional: false } ]; }},
        'atomicCompareAndSwapLength': { type: 'int', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'int', optional: false },{ index: 2, type: 'int', optional: false } ]; }},
        'clear': { type: 'void', declaredBy: 'flash.utils.ByteArray'},
        'compress': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'deflate': { type: 'void', declaredBy: 'flash.utils.ByteArray'},
        'inflate': { type: 'void', declaredBy: 'flash.utils.ByteArray'},
        'readBoolean': { type: 'Boolean', declaredBy: 'flash.utils.ByteArray'},
        'readByte': { type: 'int', declaredBy: 'flash.utils.ByteArray'},
        'readBytes': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'flash.utils.ByteArray', optional: false },{ index: 2, type: 'uint', optional: true },{ index: 3, type: 'uint', optional: true } ]; }},
        'readDouble': { type: 'Number', declaredBy: 'flash.utils.ByteArray'},
        'readFloat': { type: 'Number', declaredBy: 'flash.utils.ByteArray'},
        'readInt': { type: 'int', declaredBy: 'flash.utils.ByteArray'},
        'readMultiByte': { type: 'String', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'uint', optional: false },{ index: 2, type: 'String', optional: false } ]; }},
        'readObject': { type: '*', declaredBy: 'flash.utils.ByteArray'},
        'readShort': { type: 'int', declaredBy: 'flash.utils.ByteArray'},
        'readUnsignedByte': { type: 'uint', declaredBy: 'flash.utils.ByteArray'},
        'readUnsignedInt': { type: 'uint', declaredBy: 'flash.utils.ByteArray'},
        'readUnsignedShort': { type: 'uint', declaredBy: 'flash.utils.ByteArray'},
        'readUTF': { type: 'String', declaredBy: 'flash.utils.ByteArray'},
        'readUTFBytes': { type: 'String', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'uint', optional: false } ]; }},
        'toString': { type: 'String', declaredBy: 'flash.utils.ByteArray'},
        'uncompress': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'writeBoolean': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'Boolean', optional: false } ]; }},
        'writeByte': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'int', optional: false } ]; }},
        'writeBytes': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'flash.utils.ByteArray', optional: false },{ index: 2, type: 'uint', optional: true },{ index: 3, type: 'uint', optional: true } ]; }},
        'writeDouble': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'writeFloat': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'Number', optional: false } ]; }},
        'writeInt': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'int', optional: false } ]; }},
        'writeMultiByte': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'String', optional: false } ]; }},
        'writeObject': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: '*', optional: false } ]; }},
        'writeShort': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'int', optional: false } ]; }},
        'writeUnsignedInt': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'uint', optional: false } ]; }},
        'writeUTF': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'writeUTFBytes': { type: 'void', declaredBy: 'flash.utils.ByteArray', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};
