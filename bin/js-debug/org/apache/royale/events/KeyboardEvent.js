/**
 * Generated by Apache Royale Compiler from org\apache\royale\events\KeyboardEvent.as
 * org.apache.royale.events.KeyboardEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.KeyboardEvent');
/* Royale Dependency List: goog.events.BrowserEvent,org.apache.royale.events.IRoyaleEvent,org.apache.royale.events.getTargetWrapper*/

goog.require('org.apache.royale.events.Event');
goog.require('org.apache.royale.events.IBrowserEvent');



/**
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @implements {org.apache.royale.events.IBrowserEvent}
 * @param {string} type
 * @param {string} key
 * @param {string} code
 * @param {boolean=} shiftKey
 * @param {boolean=} altKey
 * @param {boolean=} ctrlKey
 * @param {boolean=} metaKey
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 */
org.apache.royale.events.KeyboardEvent = function(type, key, code, shiftKey, altKey, ctrlKey, metaKey, bubbles, cancelable) {
  shiftKey = typeof shiftKey !== 'undefined' ? shiftKey : false;
  altKey = typeof altKey !== 'undefined' ? altKey : false;
  ctrlKey = typeof ctrlKey !== 'undefined' ? ctrlKey : false;
  metaKey = typeof metaKey !== 'undefined' ? metaKey : false;
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  org.apache.royale.events.KeyboardEvent.base(this, 'constructor', type, bubbles = false, cancelable);
  this._key = key;
  this._code = code;
  this._shiftKey = shiftKey;
  this._altKey = altKey;
  this._ctrlKey = ctrlKey;
  this._metaKey = metaKey;
};
goog.inherits(org.apache.royale.events.KeyboardEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.events.KeyboardEvent', org.apache.royale.events.KeyboardEvent);


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.KEY_DOWN = "keydown";


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.KEY_UP = "keyup";


/**
 * @private
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype.wrappedEvent;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype.nativeEvent;


/**
 * @export
 * @param {goog.events.BrowserEvent} event
 */
org.apache.royale.events.KeyboardEvent.prototype.wrapEvent = function(event) {
  this.wrappedEvent = event;
  this.nativeEvent = event.getBrowserEvent();
};


/**
 * @private
 * @type {Object}
 */
org.apache.royale.events.KeyboardEvent.prototype._target;


/**
 * @private
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.prototype._key;


/**
 * @private
 * @type {string}
 */
org.apache.royale.events.KeyboardEvent.prototype._code;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._shiftKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._altKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._ctrlKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._metaKey;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._specialKey;


/**
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.stopImmediatePropagation = function() {
  if (this.wrappedEvent) {
    this.wrappedEvent.stopPropagation();
    this.nativeEvent.stopImmediatePropagation();
  }
};


/**
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.9
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.stopPropagation = function() {
  if (this.wrappedEvent)
    this.wrappedEvent.stopPropagation();
};


/**
 * Whether the default action has been prevented.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.preventDefault = function() {
  if (this.wrappedEvent)
    this.wrappedEvent.preventDefault(); else {
    org.apache.royale.events.KeyboardEvent.superClass_.preventDefault.apply(this);
    this._defaultPrevented = true;
  }
};


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.events.KeyboardEvent.prototype._defaultPrevented;


/**
 * Create a copy/clone of the KeyboardEvent object.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.KeyboardEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.events.KeyboardEvent(this.type, this.key, this.code, this.shiftKey, this.altKey, this.ctrlKey, this.metaKey, this.bubbles, this.cancelable);
};


org.apache.royale.events.KeyboardEvent.prototype.get__target = function() {
  return this.wrappedEvent ? org.apache.royale.events.getTargetWrapper(this.wrappedEvent.target) : this._target;
};


org.apache.royale.events.KeyboardEvent.prototype.set__target = function(value) {
  this._target = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__currentTarget = function() {
  return this.wrappedEvent ? org.apache.royale.events.getTargetWrapper(this.wrappedEvent.currentTarget) : this._target;
};


org.apache.royale.events.KeyboardEvent.prototype.set__currentTarget = function(value) {
  this._target = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__key = function() {
  return this._key;
};


org.apache.royale.events.KeyboardEvent.prototype.set__key = function(value) {
  this._key = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__code = function() {
  return this._code;
};


org.apache.royale.events.KeyboardEvent.prototype.set__code = function(value) {
  this._code = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__shiftKey = function() {
  return this._shiftKey;
};


org.apache.royale.events.KeyboardEvent.prototype.get__altKey = function() {
  return this._altKey;
};


org.apache.royale.events.KeyboardEvent.prototype.set__altKey = function(value) {
  this._altKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__ctrlKey = function() {
  return this._ctrlKey;
};


org.apache.royale.events.KeyboardEvent.prototype.set__ctrlKey = function(value) {
  this._ctrlKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__metaKey = function() {
  return this._metaKey;
};


org.apache.royale.events.KeyboardEvent.prototype.set__metaKey = function(value) {
  this._metaKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__modifierKey = function() {
  return this.shiftKey || this.ctrlKey || this.metaKey;
};


org.apache.royale.events.KeyboardEvent.prototype.get__specialKey = function() {
  return this._specialKey;
};


org.apache.royale.events.KeyboardEvent.prototype.set__specialKey = function(value) {
  this._specialKey = value;
};


org.apache.royale.events.KeyboardEvent.prototype.get__defaultPrevented = function() {
  return this.wrappedEvent ? this.wrappedEvent.defaultPrevented : this._defaultPrevented;
};


org.apache.royale.events.KeyboardEvent.prototype.set__defaultPrevented = function(value) {
  this._defaultPrevented = value;
};


Object.defineProperties(org.apache.royale.events.KeyboardEvent.prototype, /** @lends {org.apache.royale.events.KeyboardEvent.prototype} */ {
/**
  * @export
  * @type {Object} */
target: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__target,
set: org.apache.royale.events.KeyboardEvent.prototype.set__target},
/**
  * @export
  * @type {Object} */
currentTarget: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__currentTarget,
set: org.apache.royale.events.KeyboardEvent.prototype.set__currentTarget},
/**
  * @export
  * @type {string} */
key: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__key,
set: org.apache.royale.events.KeyboardEvent.prototype.set__key},
/**
  * @export
  * @type {string} */
code: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__code,
set: org.apache.royale.events.KeyboardEvent.prototype.set__code},
/**
  * @export
  * @type {boolean} */
shiftKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__shiftKey},
/**
  * @export
  * @type {boolean} */
altKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__altKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__altKey},
/**
  * @export
  * @type {boolean} */
ctrlKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__ctrlKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__ctrlKey},
/**
  * @export
  * @type {boolean} */
metaKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__metaKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__metaKey},
/**
  * @export
  * @type {boolean} */
modifierKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__modifierKey},
/**
  * @export
  * @type {boolean} */
specialKey: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__specialKey,
set: org.apache.royale.events.KeyboardEvent.prototype.set__specialKey},
/**
  * @export
  * @type {boolean} */
defaultPrevented: {
get: org.apache.royale.events.KeyboardEvent.prototype.get__defaultPrevented,
set: org.apache.royale.events.KeyboardEvent.prototype.set__defaultPrevented}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.KeyboardEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'KeyboardEvent', qName: 'org.apache.royale.events.KeyboardEvent', kind: 'class' }], interfaces: [org.apache.royale.events.IBrowserEvent] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.KeyboardEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'target': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'currentTarget': { type: 'Object', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'key': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'code': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'shiftKey': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'altKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'ctrlKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'metaKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'modifierKey': { type: 'Boolean', access: 'readonly', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'specialKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'defaultPrevented': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.events.KeyboardEvent'}
      };
    },
    methods: function () {
      return {
        'wrapEvent': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent', parameters: function () { return [  { index: 1, type: 'goog.events.BrowserEvent', optional: false } ]; }},
        'KeyboardEvent': { type: '', declaredBy: 'org.apache.royale.events.KeyboardEvent', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'String', optional: false },{ index: 3, type: 'String', optional: false },{ index: 4, type: 'Boolean', optional: true },{ index: 5, type: 'Boolean', optional: true },{ index: 6, type: 'Boolean', optional: true },{ index: 7, type: 'Boolean', optional: true },{ index: 8, type: 'Boolean', optional: true },{ index: 9, type: 'Boolean', optional: true } ]; }},
        'stopImmediatePropagation': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'stopPropagation': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'preventDefault': { type: 'void', declaredBy: 'org.apache.royale.events.KeyboardEvent'},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.events.KeyboardEvent'}
      };
    }
  };
};
