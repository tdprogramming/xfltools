/**
 * Generated by Apache Royale Compiler from org\apache\royale\events\ValueChangeEvent.as
 * org.apache.royale.events.ValueChangeEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.ValueChangeEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent*/

goog.require('org.apache.royale.events.Event');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {Object=} oldValue
 * @param {Object=} newValue
 */
org.apache.royale.events.ValueChangeEvent = function(type, bubbles, cancelable, oldValue, newValue) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  oldValue = typeof oldValue !== 'undefined' ? oldValue : null;
  newValue = typeof newValue !== 'undefined' ? newValue : null;
  org.apache.royale.events.ValueChangeEvent.base(this, 'constructor', type, bubbles, cancelable);
  this.oldValue = oldValue;
  this.newValue = newValue;
};
goog.inherits(org.apache.royale.events.ValueChangeEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.events.ValueChangeEvent', org.apache.royale.events.ValueChangeEvent);


/**
 * @export
 * @type {Object}
 */
org.apache.royale.events.ValueChangeEvent.prototype.oldValue;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.events.ValueChangeEvent.prototype.newValue;


/**
 * @export
 * @type {string}
 */
org.apache.royale.events.ValueChangeEvent.prototype.propertyName;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.events.ValueChangeEvent.prototype.source;


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE = "valueChange";


/**
 *  A convenience method to create an instance of the ValueChangeEvent.
 * 
 *  @asparam source The source of the object.
 *  @asparam name The name of the event.
 *  @asparam oldValue The value before it was changed.
 *  @asparam newValue The value after it was changed.
 *  @asreturn An instance of the ValueChangeEvent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {Object} source
 * @param {string} name
 * @param {Object} oldValue
 * @param {Object} newValue
 * @return {org.apache.royale.events.ValueChangeEvent}
 */
org.apache.royale.events.ValueChangeEvent.createUpdateEvent = function(source, name, oldValue, newValue) {
  var /** @type {org.apache.royale.events.ValueChangeEvent} */ event = new org.apache.royale.events.ValueChangeEvent(org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE, false, false, oldValue, newValue);
  event.propertyName = name;
  event.source = source;
  return event;
};


/**
 * Create a copy/clone of the ValueChangeEvent object.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.ValueChangeEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.events.ValueChangeEvent(this.type, this.bubbles, this.cancelable, this.oldValue, this.newValue);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.ValueChangeEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ValueChangeEvent', qName: 'org.apache.royale.events.ValueChangeEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.ValueChangeEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'oldValue': { type: 'Object'},
        'newValue': { type: 'Object'},
        'propertyName': { type: 'String'},
        'source': { type: 'Object'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'ValueChangeEvent': { type: '', declaredBy: 'org.apache.royale.events.ValueChangeEvent', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Boolean', optional: true },{ index: 3, type: 'Boolean', optional: true },{ index: 4, type: 'Object', optional: true },{ index: 5, type: 'Object', optional: true } ]; }},
        '|createUpdateEvent': { type: 'org.apache.royale.events.ValueChangeEvent', declaredBy: 'org.apache.royale.events.ValueChangeEvent', parameters: function () { return [  { index: 1, type: 'Object', optional: false },{ index: 2, type: 'String', optional: false },{ index: 3, type: 'Object', optional: false },{ index: 4, type: 'Object', optional: false } ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.events.ValueChangeEvent'}
      };
    }
  };
};
