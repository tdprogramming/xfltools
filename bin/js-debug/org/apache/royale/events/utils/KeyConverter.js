/**
 * Generated by Apache Royale Compiler from org\apache\royale\events\utils\KeyConverter.as
 * org.apache.royale.events.utils.KeyConverter
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.utils.KeyConverter');
/* Royale Dependency List: */



/**
 * @constructor
 */
org.apache.royale.events.utils.KeyConverter = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.events.utils.KeyConverter', org.apache.royale.events.utils.KeyConverter);


/**
 * @private
 * @const
 * @type {Object}
 */
org.apache.royale.events.utils.KeyConverter.lookup = {"Unidentified":"", "Enter":"\r", "Tab":"\t", "Spacebar":" "};


/**
 *  Converts HTML key values into rational string equivalents.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.8
 * @export
 * @param {string} value
 * @return {string}
 */
org.apache.royale.events.utils.KeyConverter.convertKey = function(value) {
  if (value.length < 2)
    return value;
  value = org.apache.royale.utils.Language.string(org.apache.royale.events.utils.KeyConverter.lookup[value]);
  return value || "";
};


/**
 *  Converts Flash keyCodes into rational string equivalents. These represent the physical (or virtual) key locations.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.8
 * @export
 * @param {number} code
 * @return {string}
 */
org.apache.royale.events.utils.KeyConverter.convertKeyCode = function(code) {
  if (code > 64 && code < 91) {
    return "Key" + String.fromCharCode(code);
  }
  if (code > 47 && code < 58) {
    return "Digit" + String.fromCharCode(code);
  }
  if (code > 95 && code < 106) {
    return "Numpad" + String.fromCharCode(code - 48);
  }
  if (code > 111 && code < 135) {
    return "F" + (code - 111);
  }
  switch (code) {
    case 8:
      return "Backspace";
    case 9:
      return "Tab";
    case 13:
      return "Enter";
    case 16:
      return "ShiftLeft";
    case 17:
      return "ControlLeft";
    case 18:
      return "AltLeft";
    case 20:
      return "CapsLock";
    case 27:
      return "Escape";
    case 32:
      return "Space";
    case 33:
      return "PageUp";
    case 34:
      return "PageDown";
    case 35:
      return "End";
    case 36:
      return "Home";
    case 37:
      return "ArrowLeft";
    case 38:
      return "ArrowUp";
    case 39:
      return "ArrowRight";
    case 40:
      return "ArrowDown";
    case 45:
      return "Insert";
    case 46:
      return "Delete";
    case 91:
      return "MetaLeft";
    case 92:
    
    case 93:
      return "MetaRight";
    case 144:
      return "NumLock";
    case 145:
      return "ScrollLock";
    case 19:
      return "Pause";
    case 186:
      return "Semicolon";
    case 187:
      return "Equal";
    case 189:
      return "Minus";
    case 191:
      return "Slash";
    case 192:
      return "Backquote";
    case 219:
      return "BracketLeft";
    case 220:
      return "Backslash";
    case 221:
      return "BracketRight";
    case 222:
      return "Quote";
    case 188:
      return "Comma";
    case 190:
      return "Period";
    case 106:
      return "NumpadMultiply";
    case 107:
      return "NumpadAdd";
    case 109:
      return "NumpadSubtract";
    case 110:
      return "NumpadDecimal";
    case 111:
      return "NumpadDivide";
    default:
      throw new Error("Unknown Key Code: " + code);
  }
};


/**
 *  Converts Flash charCodes into rational string equivalents. These represent the actual input.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.8
 * @export
 * @param {number} code
 * @return {string}
 */
org.apache.royale.events.utils.KeyConverter.convertCharCode = function(code) {
  switch (code) {
    default:
      return String.fromCharCode(code);
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.utils.KeyConverter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'KeyConverter', qName: 'org.apache.royale.events.utils.KeyConverter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.utils.KeyConverter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        '|convertKey': { type: 'String', declaredBy: 'org.apache.royale.events.utils.KeyConverter', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        '|convertKeyCode': { type: 'String', declaredBy: 'org.apache.royale.events.utils.KeyConverter', parameters: function () { return [  { index: 1, type: 'uint', optional: false } ]; }},
        '|convertCharCode': { type: 'String', declaredBy: 'org.apache.royale.events.utils.KeyConverter', parameters: function () { return [  { index: 1, type: 'uint', optional: false } ]; }}
      };
    }
  };
};
