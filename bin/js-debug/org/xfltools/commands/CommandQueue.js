/**
 * Generated by Apache Royale Compiler from org\xfltools\commands\CommandQueue.as
 * org.xfltools.commands.CommandQueue
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.xfltools.commands.CommandQueue');
/* Royale Dependency List: flash.events.Event,org.xfltools.commands.AbstractCommand,org.apache.royale.utils.Language,XML*/

goog.require('flash.events.EventDispatcher');



/**
 * @constructor
 * @extends {flash.events.EventDispatcher}
 */
org.xfltools.commands.CommandQueue = function() {
  
  this._commands = [];
  org.xfltools.commands.CommandQueue.base(this, 'constructor');
};
goog.inherits(org.xfltools.commands.CommandQueue, flash.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.xfltools.commands.CommandQueue', org.xfltools.commands.CommandQueue);


/**
 * @private
 * @type {boolean}
 */
org.xfltools.commands.CommandQueue.prototype._locked = false;


/**
 * @private
 * @type {Array}
 */
org.xfltools.commands.CommandQueue.prototype._commands;


/**
 * @export
 * @param {org.xfltools.commands.AbstractCommand} command
 */
org.xfltools.commands.CommandQueue.prototype.queue = function(command) {
  if (this._locked) {
    throw new Error("ERROR - CommandQueue.queue() - cannot queue a command after execution has started.");
  }
  this._commands.push(command);
};


/**
 * @export
 */
org.xfltools.commands.CommandQueue.prototype.execute = function() {
  if (this._locked) {
    throw new Error("ERROR - CommandQueue.execute() - cannot call execute twice.");
  }
  this._locked = true;
  this.nextCommand();
};


/**
 * @private
 * @param {flash.events.Event=} event
 */
org.xfltools.commands.CommandQueue.prototype.nextCommand = function(event) {
  event = typeof event !== 'undefined' ? event : null;
  if (event) {
    this._commands[0].removeEventListener(flash.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.nextCommand, this, 'nextCommand'));
    this._commands.shift();
  }
  if (!this._commands.length) {
    this.complete();
    return;
  }
  this._commands[0].addEventListener(flash.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.nextCommand, this, 'nextCommand'));
  this._commands[0].execute();
};


/**
 * @protected
 */
org.xfltools.commands.CommandQueue.prototype.complete = function() {
  this._locked = false;
  this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.xfltools.commands.CommandQueue.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CommandQueue', qName: 'org.xfltools.commands.CommandQueue', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.xfltools.commands.CommandQueue.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'CommandQueue': { type: '', declaredBy: 'org.xfltools.commands.CommandQueue'},
        'queue': { type: 'void', declaredBy: 'org.xfltools.commands.CommandQueue', parameters: function () { return [  { index: 1, type: 'org.xfltools.commands.AbstractCommand', optional: false } ]; }},
        'execute': { type: 'void', declaredBy: 'org.xfltools.commands.CommandQueue'}
      };
    }
  };
};
