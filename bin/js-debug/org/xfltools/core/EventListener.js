/**
 * Generated by Apache Royale Compiler from org\xfltools\core\EventListener.as
 * org.xfltools.core.EventListener
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.xfltools.core.EventListener');
/* Royale Dependency List: flash.events.Event,XML*/




/**
 * @constructor
 * @param {string} type
 * @param {Function} listener
 */
org.xfltools.core.EventListener = function(type, listener) {
  this._type = type;
  this._listener = listener;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.xfltools.core.EventListener', org.xfltools.core.EventListener);


/**
 * @private
 * @type {string}
 */
org.xfltools.core.EventListener.prototype._type;


/**
 * @private
 * @type {Function}
 */
org.xfltools.core.EventListener.prototype._listener;


/**
 * @export
 * @param {flash.events.Event} event
 */
org.xfltools.core.EventListener.prototype.respondToEvent = function(event) {
  if (this._type == event.type) {
    this._listener(event);
  }
};


/**
 * @export
 * @param {string} type
 * @param {Function} listener
 * @return {boolean}
 */
org.xfltools.core.EventListener.prototype.matches = function(type, listener) {
  return this._type == type && this._listener == listener;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.xfltools.core.EventListener.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventListener', qName: 'org.xfltools.core.EventListener', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.xfltools.core.EventListener.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'EventListener': { type: '', declaredBy: 'org.xfltools.core.EventListener', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false } ]; }},
        'respondToEvent': { type: 'void', declaredBy: 'org.xfltools.core.EventListener', parameters: function () { return [  { index: 1, type: 'flash.events.Event', optional: false } ]; }},
        'matches': { type: 'Boolean', declaredBy: 'org.xfltools.core.EventListener', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'Function', optional: false } ]; }}
      };
    }
  };
};
