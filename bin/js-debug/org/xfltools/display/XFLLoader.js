/**
 * Generated by Apache Royale Compiler from org\xfltools\display\XFLLoader.as
 * org.xfltools.display.XFLLoader
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.xfltools.display.XFLLoader');
/* Royale Dependency List: XML,flash.display.MovieClip,flash.events.Event,flash.net.URLLoader,flash.net.URLRequest,org.xfltools.xfldom.DOMComponentFactory,org.xfltools.xfldom.DOMDocument,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.xfltools.display.XFLLoader = function() {
  this._rootTimeLine = new flash.display.MovieClip();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.xfltools.display.XFLLoader', org.xfltools.display.XFLLoader);


/**
 * @private
 * @type {XML}
 */
org.xfltools.display.XFLLoader.prototype._xml;


/**
 * @private
 * @type {flash.display.MovieClip}
 */
org.xfltools.display.XFLLoader.prototype._rootTimeLine;


/**
 * @private
 * @type {flash.net.URLLoader}
 */
org.xfltools.display.XFLLoader.prototype._urlLoader;


/**
 * @private
 * @type {org.xfltools.xfldom.DOMDocument}
 */
org.xfltools.display.XFLLoader.prototype._domDocument;


/**
 * @private
 * @type {string}
 */
org.xfltools.display.XFLLoader.prototype._rootFolderURL;


/**
 * Load from the specified URL. The URL should be the parent folder of the xfl document
 * @asparam	url
 * @export
 * @param {string} url
 */
org.xfltools.display.XFLLoader.prototype.load = function(url) {
  this._rootFolderURL = url;
  this._urlLoader = new flash.net.URLLoader();
  this._urlLoader.addEventListener(flash.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onLoadComplete, this, 'onLoadComplete'));
  this._urlLoader.load(new flash.net.URLRequest(this._rootFolderURL + "/DOMDocument.xml"));
};


/**
 * @private
 * @param {flash.events.Event} event
 */
org.xfltools.display.XFLLoader.prototype.onLoadComplete = function(event) {
  this._urlLoader.removeEventListener(flash.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onLoadComplete, this, 'onLoadComplete'));
  this._xml = new XML(this._urlLoader.data);
  org.xfltools.xfldom.DOMComponentFactory.populateSymbols(this._rootFolderURL, this._xml, org.apache.royale.utils.Language.closure(this.onLibraryLoadComplete, this, 'onLibraryLoadComplete'));
};


/**
 * @private
 * @param {flash.events.Event} event
 */
org.xfltools.display.XFLLoader.prototype.onLibraryLoadComplete = function(event) {
  this._domDocument = new org.xfltools.xfldom.DOMDocument();
  this._domDocument.fromXML(this._xml);
  this.renderDocument();
};


/**
 * @private
 */
org.xfltools.display.XFLLoader.prototype.renderDocument = function() {
  this._rootTimeLine.addChild(this._domDocument.toDisplayObject());
};


org.xfltools.display.XFLLoader.prototype.get__rootTimeline = function() {
  return this._rootTimeLine;
};


Object.defineProperties(org.xfltools.display.XFLLoader.prototype, /** @lends {org.xfltools.display.XFLLoader.prototype} */ {
/**
  * @export
  * @type {flash.display.MovieClip} */
rootTimeline: {
get: org.xfltools.display.XFLLoader.prototype.get__rootTimeline}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.xfltools.display.XFLLoader.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'XFLLoader', qName: 'org.xfltools.display.XFLLoader', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.xfltools.display.XFLLoader.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'rootTimeline': { type: 'flash.display.MovieClip', access: 'readonly', declaredBy: 'org.xfltools.display.XFLLoader'}
      };
    },
    methods: function () {
      return {
        'XFLLoader': { type: '', declaredBy: 'org.xfltools.display.XFLLoader'},
        'load': { type: 'void', declaredBy: 'org.xfltools.display.XFLLoader', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }}
      };
    }
  };
};
