/**
 * Generated by Apache Royale Compiler from org\xfltools\xfldom\EdgeDescriptor.as
 * org.xfltools.xfldom.EdgeDescriptor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.xfltools.xfldom.EdgeDescriptor');
/* Royale Dependency List: flash.geom.Point,org.xfltools.utils.TWIPS,XML*/




/**
 * @constructor
 * @param {string} descriptorString
 * @param {number} strokeStyle
 * @param {number} fillStyle
 */
org.xfltools.xfldom.EdgeDescriptor = function(descriptorString, strokeStyle, fillStyle) {
  var /** @type {Array} */ splitDescriptor;
  this._strokeStyle = strokeStyle;
  this._fillStyle = fillStyle;
  if (descriptorString.lastIndexOf("|") != -1) {
    splitDescriptor = descriptorString.split("|");
    this._start = this.spaceSeparatedStringToPoint(splitDescriptor[0]);
    this._end = this.spaceSeparatedStringToPoint(splitDescriptor[1]);
  } else if (descriptorString.lastIndexOf("[") != -1) {
    splitDescriptor = descriptorString.split("[");
    this._start = this.spaceSeparatedStringToPoint(splitDescriptor[0]);
    this._control = this.spaceSeparatedStringToPoint(splitDescriptor[1]);
    this._end = this.spaceSeparatedStringToPoint(splitDescriptor[1], 2);
  }
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.xfltools.xfldom.EdgeDescriptor', org.xfltools.xfldom.EdgeDescriptor);


/**
 * @protected
 * @type {flash.geom.Point}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype._start;


/**
 * @protected
 * @type {flash.geom.Point}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype._end;


/**
 * @protected
 * @type {flash.geom.Point}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype._control;


/**
 * @protected
 * @type {number}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype._fillStyle = 0;


/**
 * @protected
 * @type {number}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype._strokeStyle = 0;


/**
 * @private
 * @param {string} input
 * @return {string}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.removeIllegalCharacters = function(input) {
  var /** @type {string} */ result = "";
  for (var /** @type {number} */ i = 0; i < input.length; i++) {
    var /** @type {string} */ suspectChar = input.charAt(i);
    if (suspectChar != "\r" && suspectChar != "\n" && suspectChar != "\r\n" && suspectChar != " ") {
      result += suspectChar;
    }
  }
  return result;
};


/**
 * @private
 * @param {string} descriptorString
 * @param {number=} offset
 * @return {flash.geom.Point}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.spaceSeparatedStringToPoint = function(descriptorString, offset) {
  offset = typeof offset !== 'undefined' ? offset : 0;
  var /** @type {Array} */ splitDescriptor = descriptorString.split(" ");
  for (var /** @type {number} */ i = splitDescriptor.length - 1; i >= 0; i--) {
    if (this.removeIllegalCharacters(splitDescriptor[i]) == "") {
      splitDescriptor.splice(i, 1);
    }
  }
  var /** @type {flash.geom.Point} */ result = new flash.geom.Point(this.parseDorHFloat(splitDescriptor[0 + offset]) / org.xfltools.utils.TWIPS.TWIPS_PER_PIXEL, this.parseDorHFloat(splitDescriptor[1 + offset]) / org.xfltools.utils.TWIPS.TWIPS_PER_PIXEL);
  return result;
};


/**
 * Parse numbers which may come in a hex strings or straight dec strings
 * Adobe seem to put decimal points in hex numbers sometimes in the XFL format
 * Needs further research but for now it's just - the number after the decimal point goes to decimal, then append the digits to 
 * the number before the point
 * @asparam	input
 * @asreturn
 * @private
 * @param {string} input
 * @return {number}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.parseDorHFloat = function(input) {
  input = this.removeIllegalCharacters(input);
  if (input.lastIndexOf("S") != -1) {
    input = org.apache.royale.utils.Language.string(input.split("S")[0]);
  }
  var /** @type {number} */ result;
  if (input.charAt(0) == "#") {
    input = input.substr(1);
    if (input.lastIndexOf(".") == -1) {
      result = parseFloat("0x" + input);
    } else {
      var /** @type {Array} */ inputArray = input.split(".");
      if (inputArray[1].length == 1) {
        inputArray[1] += "0";
      }
      while (inputArray[0].length < 6) {
        inputArray[0] = "0" + inputArray[0];
      }
      result = parseInt("0x" + inputArray[0] + inputArray[1], undefined) / 256;
    }
    if (result >= 0x80000000) {
      result = -(0xFFFFFFFF - result + 1);
    }
    return result;
  }
  return parseFloat(input);
};


/**
 * @export
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.reverse = function() {
  var /** @type {flash.geom.Point} */ tempStart = this._start.clone();
  this._start = this._end;
  this._end = tempStart;
};


org.xfltools.xfldom.EdgeDescriptor.prototype.get__start = function() {
  return this._start;
};


org.xfltools.xfldom.EdgeDescriptor.prototype.get__end = function() {
  return this._end;
};


org.xfltools.xfldom.EdgeDescriptor.prototype.get__control = function() {
  return this._control;
};


org.xfltools.xfldom.EdgeDescriptor.prototype.get__strokeStyle = function() {
  return this._strokeStyle;
};


org.xfltools.xfldom.EdgeDescriptor.prototype.get__fillStyle = function() {
  return this._fillStyle;
};


Object.defineProperties(org.xfltools.xfldom.EdgeDescriptor.prototype, /** @lends {org.xfltools.xfldom.EdgeDescriptor.prototype} */ {
/**
  * @export
  * @type {flash.geom.Point} */
start: {
get: org.xfltools.xfldom.EdgeDescriptor.prototype.get__start},
/**
  * @export
  * @type {flash.geom.Point} */
end: {
get: org.xfltools.xfldom.EdgeDescriptor.prototype.get__end},
/**
  * @export
  * @type {flash.geom.Point} */
control: {
get: org.xfltools.xfldom.EdgeDescriptor.prototype.get__control},
/**
  * @export
  * @type {number} */
strokeStyle: {
get: org.xfltools.xfldom.EdgeDescriptor.prototype.get__strokeStyle},
/**
  * @export
  * @type {number} */
fillStyle: {
get: org.xfltools.xfldom.EdgeDescriptor.prototype.get__fillStyle}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EdgeDescriptor', qName: 'org.xfltools.xfldom.EdgeDescriptor', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.xfltools.xfldom.EdgeDescriptor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'start': { type: 'flash.geom.Point', access: 'readonly', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'},
        'end': { type: 'flash.geom.Point', access: 'readonly', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'},
        'control': { type: 'flash.geom.Point', access: 'readonly', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'},
        'strokeStyle': { type: 'int', access: 'readonly', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'},
        'fillStyle': { type: 'int', access: 'readonly', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'}
      };
    },
    methods: function () {
      return {
        'EdgeDescriptor': { type: '', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor', parameters: function () { return [  { index: 1, type: 'String', optional: false },{ index: 2, type: 'int', optional: false },{ index: 3, type: 'int', optional: false } ]; }},
        'reverse': { type: 'void', declaredBy: 'org.xfltools.xfldom.EdgeDescriptor'}
      };
    }
  };
};
