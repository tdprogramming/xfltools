/**
 * Generated by Apache Royale Compiler from org\xfltools\xfldom\PropertyContainer.as
 * org.xfltools.xfldom.PropertyContainer
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.xfltools.xfldom.PropertyContainer');
/* Royale Dependency List: XML,org.xfltools.xfldom.DOMComponentFactory,org.xfltools.xfldom.DOMXMLNodeName,org.xfltools.xfldom.Property,org.xfltools.xfldom.TweenVO*/

goog.require('org.xfltools.xfldom.IDOMComponent');



/**
 * @constructor
 * @implements {org.xfltools.xfldom.IDOMComponent}
 */
org.xfltools.xfldom.PropertyContainer = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.xfltools.xfldom.PropertyContainer', org.xfltools.xfldom.PropertyContainer);


/**
 * @export
 * @const
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.ID_HEAD = "headContainer";


/**
 * @export
 * @const
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.ID_BASIC_MOTION = "Basic_Motion";


/**
 * @export
 * @const
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.ID_TRANSFORMATION = "Transformation";


/**
 * @export
 * @const
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.ID_COLORS = "Colors";


/**
 * @export
 * @const
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.ID_FILTERS = "Filters";


/**
 * @private
 * @type {string}
 */
org.xfltools.xfldom.PropertyContainer.prototype._id;


/**
 * @private
 * @type {Array}
 */
org.xfltools.xfldom.PropertyContainer.prototype._propertyContainers;


/**
 * @private
 * @type {Array}
 */
org.xfltools.xfldom.PropertyContainer.prototype._properties;


/**
 * @export
 * @param {XML} xml
 */
org.xfltools.xfldom.PropertyContainer.prototype.fromXML = function(xml) {
  this._id = org.apache.royale.utils.Language.string(xml.attribute('id'));
  this._propertyContainers = org.xfltools.xfldom.DOMComponentFactory.getDOMComponentArray(xml, [org.xfltools.xfldom.DOMXMLNodeName.PROPERTY_CONTAINER], org.xfltools.xfldom.PropertyContainer).slice();
  this._properties = org.xfltools.xfldom.DOMComponentFactory.getDOMComponentArray(xml, [org.xfltools.xfldom.DOMXMLNodeName.PROPERTY], org.xfltools.xfldom.Property).slice();
};


/**
 * @export
 * @return {Array}
 */
org.xfltools.xfldom.PropertyContainer.prototype.getTweenData = function() {
  var /** @type {Array} */ result = [];
  var foreachiter0_target = this._properties;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var property = foreachiter0_target[foreachiter0];
  {
    result = result.concat(property.getTweenData());
  }}
  
  var foreachiter1_target = this._propertyContainers;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var propertyContainer = foreachiter1_target[foreachiter1];
  {
    result = result.concat(propertyContainer.getTweenData());
  }}
  
  return result;
};


org.xfltools.xfldom.PropertyContainer.prototype.get__id = function() {
  return this._id;
};


Object.defineProperties(org.xfltools.xfldom.PropertyContainer.prototype, /** @lends {org.xfltools.xfldom.PropertyContainer.prototype} */ {
/**
  * @export
  * @type {string} */
id: {
get: org.xfltools.xfldom.PropertyContainer.prototype.get__id}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.xfltools.xfldom.PropertyContainer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'PropertyContainer', qName: 'org.xfltools.xfldom.PropertyContainer', kind: 'class' }], interfaces: [org.xfltools.xfldom.IDOMComponent] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.xfltools.xfldom.PropertyContainer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'id': { type: 'String', access: 'readonly', declaredBy: 'org.xfltools.xfldom.PropertyContainer'}
      };
    },
    methods: function () {
      return {
        'PropertyContainer': { type: '', declaredBy: 'org.xfltools.xfldom.PropertyContainer'},
        'fromXML': { type: 'void', declaredBy: 'org.xfltools.xfldom.PropertyContainer', parameters: function () { return [  { index: 1, type: 'XML', optional: false } ]; }},
        'getTweenData': { type: 'Vector.<org.xfltools.xfldom.TweenVO>', declaredBy: 'org.xfltools.xfldom.PropertyContainer'}
      };
    }
  };
};
